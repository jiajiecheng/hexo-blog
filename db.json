{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img_23_9_10/img.png","path":"img_23_9_10/img.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_1.png","path":"img_23_9_10/img_1.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_10.png","path":"img_23_9_10/img_10.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_11.png","path":"img_23_9_10/img_11.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_12.png","path":"img_23_9_10/img_12.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_13.png","path":"img_23_9_10/img_13.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_2.png","path":"img_23_9_10/img_2.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_3.png","path":"img_23_9_10/img_3.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_4.png","path":"img_23_9_10/img_4.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_5.png","path":"img_23_9_10/img_5.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_6.png","path":"img_23_9_10/img_6.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_7.png","path":"img_23_9_10/img_7.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_8.png","path":"img_23_9_10/img_8.png","modified":1,"renderable":0},{"_id":"source/img_23_9_10/img_9.png","path":"img_23_9_10/img_9.png","modified":1,"renderable":0},{"_id":"source/img_23_9_18/img.png","path":"img_23_9_18/img.png","modified":1,"renderable":0},{"_id":"source/img_23_9_18/img_1.png","path":"img_23_9_18/img_1.png","modified":1,"renderable":0},{"_id":"source/img_23_9_21/img.png","path":"img_23_9_21/img.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Django学习笔记三.md","hash":"939018fd63ea5f0a80a38da38672ee41ed306041","modified":1695042724399},{"_id":"source/_posts/Django学习笔记一.md","hash":"b492b647c5d4c58ce91612c8340172d6bb78922c","modified":1695309175870},{"_id":"source/_posts/Django学习笔记二.md","hash":"299089ee1580aea3a3bf818b1369e47e166059f2","modified":1694792037193},{"_id":"source/_posts/Django学习笔记四.md","hash":"9eda1d375751801b0ff423a5cdacf7019a25e26a","modified":1695309141708},{"_id":"source/_posts/Redis学习笔记一.md","hash":"82fab575fc590a0e0d6e987b6f6e7f8382d93fc3","modified":1695135878821},{"_id":"source/_posts/我的第一篇博客.md","hash":"1654b8e339c2549a97f98e38e8b37d7f92606ae6","modified":1687751450727},{"_id":"source/_posts/vue学习笔记-一.md","hash":"591036e6c042c6acb7e8e90ba4f6ff07d42c7ec8","modified":1695309236057},{"_id":"source/img_23_9_10/img.png","hash":"0e337c4174cec545cac17c464bc83a60790682eb","modified":1694338632804},{"_id":"source/img_23_9_10/img_1.png","hash":"df0443ca40cbe139de0d26c22c68a7bb0340da92","modified":1694350534495},{"_id":"source/img_23_9_10/img_11.png","hash":"0710b5463838bf411b351bce7372763570cece76","modified":1694355073078},{"_id":"source/img_23_9_10/img_10.png","hash":"435a834b191756e82bf63e33be32de77017d2134","modified":1694354882147},{"_id":"source/img_23_9_10/img_12.png","hash":"449633d54439ea579d6fe46e6b9ae2c21cb142fa","modified":1694355406694},{"_id":"source/img_23_9_10/img_13.png","hash":"d0447342a5b32749c7c3fc670f7db3ca0a6cd6da","modified":1694355594720},{"_id":"source/img_23_9_10/img_3.png","hash":"d44316f19fc92170270c4e82ecf9d42c1c270c5d","modified":1694351951031},{"_id":"source/img_23_9_10/img_2.png","hash":"7229ba103c1373f09f4b7abf7e6cbb4d4832f064","modified":1694351097278},{"_id":"source/img_23_9_10/img_4.png","hash":"66125fd0adceff2cc4e7efd275a3da95330773b5","modified":1694352106458},{"_id":"source/img_23_9_10/img_5.png","hash":"49e5ae54f5624693ea69a4f82dbd2c3f7fb86dd2","modified":1694352385018},{"_id":"source/img_23_9_10/img_7.png","hash":"91124cd071cb0fd86ef7551d3450419bac7ed26f","modified":1694354405640},{"_id":"source/img_23_9_10/img_6.png","hash":"11f9f0e465f3436e140da428244f194be96448b0","modified":1694353435335},{"_id":"source/img_23_9_10/img_9.png","hash":"c23a9f89b78f3670e507c82deb9aa5c54e6ef7c8","modified":1694354780472},{"_id":"source/img_23_9_10/img_8.png","hash":"3e24c44d19f563c4c491a18d6000481a6cf16670","modified":1694354586337},{"_id":"source/img_23_9_18/img_1.png","hash":"02f92b19a60d2756993fdb681f4a9e0557c2e84d","modified":1695033391593},{"_id":"source/img_23_9_21/img.png","hash":"de26d5af06f2de56cf96d74030ff3d1d9134312e","modified":1695303591990},{"_id":"source/img_23_9_18/img.png","hash":"070ba70ad69926cb85aae8b092bad71f1b2a3cd1","modified":1694876186124},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1687184519453},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1687184519833},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1687184519830},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1687184519884},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1687184519888},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687184519896},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1687184519892},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687184519899},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687184519900},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1687184519901},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1687184519903},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1687184519904},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1687184519905},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1687184519907},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1687184519909},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1687184519908},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1687184519912},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1687184519915},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1687184519917},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1687184519918},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1687184519921},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1687184519920},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1687184519922},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1687184519924},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1687184519925},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1687184519926},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1687184519928},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1687184519932},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1687184519934},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1687184519936},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1687184519940},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1687184519938},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1687184519942},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1687184519941},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1687184519943},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1687184519945},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1687184519587},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1687184519626},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1687184519708},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1687184519704},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1687184519725},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1687184519730},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1687184519758},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1687184519805},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1687184519486},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1687184519507},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1687184519592},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1687184519652},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1687184519672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1687184519689},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1687184519682},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1687184519493},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1687184519716},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1687184519693},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1687184519740},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1687184519572},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1687184519617},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1687184519737},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1687184519755},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1687184519767},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1687184519838},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1687184519841},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1687184519880},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1687184519469},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1687184519828},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1687184519606},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1687184519639},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1687184519658},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1687184519720},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1687184519769},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1687184519747},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1687184519849},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1687184519853},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1687184519851},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1687184519861},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1687184519856},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1687184519863},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1687184519867},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1687184519869},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1687184519872},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1687184519875},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1687184519859},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1687184519866},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1687184519825},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1687184519815},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1687184519802},{"_id":"public/2023/09/18/Django学习笔记三/index.html","hash":"c4169ef2fce25c229a15f78a0cec9eb2ab59d6cb","modified":1695309364166},{"_id":"public/2023/06/19/我的第一篇博客/index.html","hash":"456e94f07c5138b5e66c8c50c3714160661f0dfd","modified":1695309364166},{"_id":"public/archives/index.html","hash":"efc07a16db9367409236cef1304596885d04cb2f","modified":1695309364166},{"_id":"public/archives/2023/index.html","hash":"d1efdfcd32e286c6542a6039d1f1770dee1ab988","modified":1695309364166},{"_id":"public/archives/2023/06/index.html","hash":"b2ae0bb96a57c80a6d93832022074c65bb31abb4","modified":1695309364166},{"_id":"public/archives/2023/09/index.html","hash":"6b4c931db810c6b488dc5f40d405f040773c6e0b","modified":1695309364166},{"_id":"public/tags/Django/index.html","hash":"2152712a0d641310b6957120d96402e846d8827a","modified":1695309364166},{"_id":"public/tags/Redis/index.html","hash":"4d8d56d740ad544e47352e4628a4e01583b2c7dc","modified":1695309364166},{"_id":"public/tags/Vue/index.html","hash":"e6fbed87e12b1ba2e0b45bf649c60c2bbdaf46ef","modified":1695309364166},{"_id":"public/tags/闲聊/index.html","hash":"fc46463a5bb0a6991f22ba115290204f6316ccd6","modified":1695309364166},{"_id":"public/2023/09/21/Django学习笔记四/index.html","hash":"bccd19a08c92c826ababd46da9734bf3e009edb2","modified":1695309364166},{"_id":"public/2023/09/19/Redis学习笔记一/index.html","hash":"0077955c69836c43770f261113bffd6171abfba1","modified":1695309364166},{"_id":"public/2023/09/15/Django学习笔记二/index.html","hash":"ba84926994219d0a3f70f44b4519351625f2b917","modified":1695309364166},{"_id":"public/2023/09/10/Django学习笔记一/index.html","hash":"fa2cde577dc0aff9703cea4f82b88f45be747c72","modified":1695309364166},{"_id":"public/2023/06/27/vue学习笔记-一/index.html","hash":"d01e30bee5f096bf5dfafda29e920e2a006e5246","modified":1695309364166},{"_id":"public/index.html","hash":"0dcabd98fc31cf17f6985fb1692359151dc7c243","modified":1695309364166},{"_id":"public/img_23_9_10/img.png","hash":"0e337c4174cec545cac17c464bc83a60790682eb","modified":1695309364166},{"_id":"public/img_23_9_10/img_1.png","hash":"df0443ca40cbe139de0d26c22c68a7bb0340da92","modified":1695309364166},{"_id":"public/img_23_9_10/img_11.png","hash":"0710b5463838bf411b351bce7372763570cece76","modified":1695309364166},{"_id":"public/img_23_9_10/img_10.png","hash":"435a834b191756e82bf63e33be32de77017d2134","modified":1695309364166},{"_id":"public/img_23_9_10/img_12.png","hash":"449633d54439ea579d6fe46e6b9ae2c21cb142fa","modified":1695309364166},{"_id":"public/img_23_9_10/img_2.png","hash":"7229ba103c1373f09f4b7abf7e6cbb4d4832f064","modified":1695309364166},{"_id":"public/img_23_9_10/img_13.png","hash":"d0447342a5b32749c7c3fc670f7db3ca0a6cd6da","modified":1695309364166},{"_id":"public/img_23_9_10/img_3.png","hash":"d44316f19fc92170270c4e82ecf9d42c1c270c5d","modified":1695309364166},{"_id":"public/img_23_9_10/img_4.png","hash":"66125fd0adceff2cc4e7efd275a3da95330773b5","modified":1695309364166},{"_id":"public/img_23_9_10/img_6.png","hash":"11f9f0e465f3436e140da428244f194be96448b0","modified":1695309364166},{"_id":"public/img_23_9_10/img_7.png","hash":"91124cd071cb0fd86ef7551d3450419bac7ed26f","modified":1695309364166},{"_id":"public/img_23_9_10/img_5.png","hash":"49e5ae54f5624693ea69a4f82dbd2c3f7fb86dd2","modified":1695309364166},{"_id":"public/img_23_9_10/img_8.png","hash":"3e24c44d19f563c4c491a18d6000481a6cf16670","modified":1695309364166},{"_id":"public/img_23_9_10/img_9.png","hash":"c23a9f89b78f3670e507c82deb9aa5c54e6ef7c8","modified":1695309364166},{"_id":"public/img_23_9_18/img_1.png","hash":"02f92b19a60d2756993fdb681f4a9e0557c2e84d","modified":1695309364166},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1695309364166},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1695309364166},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1695309364166},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1695309364166},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1695309364166},{"_id":"public/img_23_9_21/img.png","hash":"de26d5af06f2de56cf96d74030ff3d1d9134312e","modified":1695309364166},{"_id":"public/img_23_9_18/img.png","hash":"070ba70ad69926cb85aae8b092bad71f1b2a3cd1","modified":1695309364166},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1695309364166}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Django学习笔记（三）","date":"2023-09-18T13:07:32.000Z","_content":"# 邮件系统\n\n## 相关协议\n\n### SMTP\n\nSMTP的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议 (25号端口)\n它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转 属于“推送”协议\n\n### IMAP\n\nIMAP全称是Internet Mail Access Protocol，即交互式邮件访问协议，是一个应用层协议 (端口是143)用来从本地邮件客户端(Outlook\nExpress、Foxmail、MozillaThunderbird等)\n访问远程服务器上的邮件 属于“拉取”协议。\n\n### POP3\n\nPOP3是Post Office Protocol 3的简称，即邮局协议的第3个版本是TCP/IP协议族中的一员\n(默认端口是110)本协议主要用于支持使用客户端远程管理在服务器上的电子邮件 属于“拉取”协议\n\n### POP3与IMAP的区别\n\n两者均为“拉取”型协议，负责从邮件服务器中 下载邮件·IMAP 具备 摘要浏览功能，可预览部分摘要，再下载整个邮件IMAP\n为双向协议，客户端操作可反馈给服务器 ·POP3必须下载全部邮件，无摘要功能 ·POP3\n为单向协议，客户端操作无法同步服务器。\n\n### 对应的过程\n\n> ![img.png](./../img_23_9_18/img.png)\n\nDjango重点关注SMTP部分，也就是如何将对应的邮件发送到指定的用户。\n\n## Django发送邮箱\n\n1. 申请QQ账号\n2. QQ邮箱授权\n   点击设置,点击账户,选择开启POP3/SMTP服务。如下：\n   ![img_1.png](./../img_23_9_18/img_1.png)\n3. 拿到授权码\n4. 在settings.py中进行对应的配置\n\n```pycon\n# 发送邮件配置\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# smpt服务地址\nEMAIL_HOST = 'smtp.qq.com'\nEMAIL_PORT = 25  # 端口默认都是25不需要修改\n# 发送邮件的邮箱，需要配置开通SMTP\nEMAIL_HOST_USER = 'xxxx@qq.com'\n# 在邮箱中设置的客户端授权密码\n# 此处的EMAIL_HOST_PASSWORD是用QQ邮箱授权码登录\nEMAIL_HOST_PASSWORD = 'xxxx'\n# 收件人看到的发件人\nEMAIL_FROM = 'xxxx@qq.com'\n```\n\n5. 调用Django内置的函数\n\n```pycon\nfrom django.core import mail\ndef cache_test(request):\n    mail.send_mail(\n        subject='邮件标题',\n        message='邮件消息',\n        from_email='xxxx@qq.com' # 发送者,默认为当前配置的邮箱\n        recipient_list=['xxx@qq.com']  # 接收者列表\n    )\n    return  HttpResponse('发送成功')\n```\n","source":"_posts/Django学习笔记三.md","raw":"---\ntitle: Django学习笔记（三）\ndate: 2023-09-18 21:07:32\ntags: Django\n---\n# 邮件系统\n\n## 相关协议\n\n### SMTP\n\nSMTP的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议 (25号端口)\n它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转 属于“推送”协议\n\n### IMAP\n\nIMAP全称是Internet Mail Access Protocol，即交互式邮件访问协议，是一个应用层协议 (端口是143)用来从本地邮件客户端(Outlook\nExpress、Foxmail、MozillaThunderbird等)\n访问远程服务器上的邮件 属于“拉取”协议。\n\n### POP3\n\nPOP3是Post Office Protocol 3的简称，即邮局协议的第3个版本是TCP/IP协议族中的一员\n(默认端口是110)本协议主要用于支持使用客户端远程管理在服务器上的电子邮件 属于“拉取”协议\n\n### POP3与IMAP的区别\n\n两者均为“拉取”型协议，负责从邮件服务器中 下载邮件·IMAP 具备 摘要浏览功能，可预览部分摘要，再下载整个邮件IMAP\n为双向协议，客户端操作可反馈给服务器 ·POP3必须下载全部邮件，无摘要功能 ·POP3\n为单向协议，客户端操作无法同步服务器。\n\n### 对应的过程\n\n> ![img.png](./../img_23_9_18/img.png)\n\nDjango重点关注SMTP部分，也就是如何将对应的邮件发送到指定的用户。\n\n## Django发送邮箱\n\n1. 申请QQ账号\n2. QQ邮箱授权\n   点击设置,点击账户,选择开启POP3/SMTP服务。如下：\n   ![img_1.png](./../img_23_9_18/img_1.png)\n3. 拿到授权码\n4. 在settings.py中进行对应的配置\n\n```pycon\n# 发送邮件配置\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n# smpt服务地址\nEMAIL_HOST = 'smtp.qq.com'\nEMAIL_PORT = 25  # 端口默认都是25不需要修改\n# 发送邮件的邮箱，需要配置开通SMTP\nEMAIL_HOST_USER = 'xxxx@qq.com'\n# 在邮箱中设置的客户端授权密码\n# 此处的EMAIL_HOST_PASSWORD是用QQ邮箱授权码登录\nEMAIL_HOST_PASSWORD = 'xxxx'\n# 收件人看到的发件人\nEMAIL_FROM = 'xxxx@qq.com'\n```\n\n5. 调用Django内置的函数\n\n```pycon\nfrom django.core import mail\ndef cache_test(request):\n    mail.send_mail(\n        subject='邮件标题',\n        message='邮件消息',\n        from_email='xxxx@qq.com' # 发送者,默认为当前配置的邮箱\n        recipient_list=['xxx@qq.com']  # 接收者列表\n    )\n    return  HttpResponse('发送成功')\n```\n","slug":"Django学习笔记三","published":1,"updated":"2023-09-18T13:12:04.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9kn00005otxbw78bgtc","content":"<h1 id=\"邮件系统\"><a href=\"#邮件系统\" class=\"headerlink\" title=\"邮件系统\"></a>邮件系统</h1><h2 id=\"相关协议\"><a href=\"#相关协议\" class=\"headerlink\" title=\"相关协议\"></a>相关协议</h2><h3 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h3><p>SMTP的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议 (25号端口)<br>它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转 属于“推送”协议</p>\n<h3 id=\"IMAP\"><a href=\"#IMAP\" class=\"headerlink\" title=\"IMAP\"></a>IMAP</h3><p>IMAP全称是Internet Mail Access Protocol，即交互式邮件访问协议，是一个应用层协议 (端口是143)用来从本地邮件客户端(Outlook<br>Express、Foxmail、MozillaThunderbird等)<br>访问远程服务器上的邮件 属于“拉取”协议。</p>\n<h3 id=\"POP3\"><a href=\"#POP3\" class=\"headerlink\" title=\"POP3\"></a>POP3</h3><p>POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本是TCP&#x2F;IP协议族中的一员<br>(默认端口是110)本协议主要用于支持使用客户端远程管理在服务器上的电子邮件 属于“拉取”协议</p>\n<h3 id=\"POP3与IMAP的区别\"><a href=\"#POP3与IMAP的区别\" class=\"headerlink\" title=\"POP3与IMAP的区别\"></a>POP3与IMAP的区别</h3><p>两者均为“拉取”型协议，负责从邮件服务器中 下载邮件·IMAP 具备 摘要浏览功能，可预览部分摘要，再下载整个邮件IMAP<br>为双向协议，客户端操作可反馈给服务器 ·POP3必须下载全部邮件，无摘要功能 ·POP3<br>为单向协议，客户端操作无法同步服务器。</p>\n<h3 id=\"对应的过程\"><a href=\"#对应的过程\" class=\"headerlink\" title=\"对应的过程\"></a>对应的过程</h3><blockquote>\n<p><img src=\"/./../img_23_9_18/img.png\" alt=\"img.png\"></p>\n</blockquote>\n<p>Django重点关注SMTP部分，也就是如何将对应的邮件发送到指定的用户。</p>\n<h2 id=\"Django发送邮箱\"><a href=\"#Django发送邮箱\" class=\"headerlink\" title=\"Django发送邮箱\"></a>Django发送邮箱</h2><ol>\n<li>申请QQ账号</li>\n<li>QQ邮箱授权<br>点击设置,点击账户,选择开启POP3&#x2F;SMTP服务。如下：<br><img src=\"/./../img_23_9_18/img_1.png\" alt=\"img_1.png\"></li>\n<li>拿到授权码</li>\n<li>在settings.py中进行对应的配置</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 发送邮件配置</span><br><span class=\"line\">EMAIL_BACKEND = &#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span><br><span class=\"line\"># smpt服务地址</span><br><span class=\"line\">EMAIL_HOST = &#x27;smtp.qq.com&#x27;</span><br><span class=\"line\">EMAIL_PORT = 25  # 端口默认都是25不需要修改</span><br><span class=\"line\"># 发送邮件的邮箱，需要配置开通SMTP</span><br><span class=\"line\">EMAIL_HOST_USER = &#x27;xxxx@qq.com&#x27;</span><br><span class=\"line\"># 在邮箱中设置的客户端授权密码</span><br><span class=\"line\"># 此处的EMAIL_HOST_PASSWORD是用QQ邮箱授权码登录</span><br><span class=\"line\">EMAIL_HOST_PASSWORD = &#x27;xxxx&#x27;</span><br><span class=\"line\"># 收件人看到的发件人</span><br><span class=\"line\">EMAIL_FROM = &#x27;xxxx@qq.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>调用Django内置的函数</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.core import mail</span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    mail.send_mail(</span><br><span class=\"line\">        subject=&#x27;邮件标题&#x27;,</span><br><span class=\"line\">        message=&#x27;邮件消息&#x27;,</span><br><span class=\"line\">        from_email=&#x27;xxxx@qq.com&#x27; # 发送者,默认为当前配置的邮箱</span><br><span class=\"line\">        recipient_list=[&#x27;xxx@qq.com&#x27;]  # 接收者列表</span><br><span class=\"line\">    )</span><br><span class=\"line\">    return  HttpResponse(&#x27;发送成功&#x27;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"邮件系统\"><a href=\"#邮件系统\" class=\"headerlink\" title=\"邮件系统\"></a>邮件系统</h1><h2 id=\"相关协议\"><a href=\"#相关协议\" class=\"headerlink\" title=\"相关协议\"></a>相关协议</h2><h3 id=\"SMTP\"><a href=\"#SMTP\" class=\"headerlink\" title=\"SMTP\"></a>SMTP</h3><p>SMTP的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议 (25号端口)<br>它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转 属于“推送”协议</p>\n<h3 id=\"IMAP\"><a href=\"#IMAP\" class=\"headerlink\" title=\"IMAP\"></a>IMAP</h3><p>IMAP全称是Internet Mail Access Protocol，即交互式邮件访问协议，是一个应用层协议 (端口是143)用来从本地邮件客户端(Outlook<br>Express、Foxmail、MozillaThunderbird等)<br>访问远程服务器上的邮件 属于“拉取”协议。</p>\n<h3 id=\"POP3\"><a href=\"#POP3\" class=\"headerlink\" title=\"POP3\"></a>POP3</h3><p>POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本是TCP&#x2F;IP协议族中的一员<br>(默认端口是110)本协议主要用于支持使用客户端远程管理在服务器上的电子邮件 属于“拉取”协议</p>\n<h3 id=\"POP3与IMAP的区别\"><a href=\"#POP3与IMAP的区别\" class=\"headerlink\" title=\"POP3与IMAP的区别\"></a>POP3与IMAP的区别</h3><p>两者均为“拉取”型协议，负责从邮件服务器中 下载邮件·IMAP 具备 摘要浏览功能，可预览部分摘要，再下载整个邮件IMAP<br>为双向协议，客户端操作可反馈给服务器 ·POP3必须下载全部邮件，无摘要功能 ·POP3<br>为单向协议，客户端操作无法同步服务器。</p>\n<h3 id=\"对应的过程\"><a href=\"#对应的过程\" class=\"headerlink\" title=\"对应的过程\"></a>对应的过程</h3><blockquote>\n<p><img src=\"/./../img_23_9_18/img.png\" alt=\"img.png\"></p>\n</blockquote>\n<p>Django重点关注SMTP部分，也就是如何将对应的邮件发送到指定的用户。</p>\n<h2 id=\"Django发送邮箱\"><a href=\"#Django发送邮箱\" class=\"headerlink\" title=\"Django发送邮箱\"></a>Django发送邮箱</h2><ol>\n<li>申请QQ账号</li>\n<li>QQ邮箱授权<br>点击设置,点击账户,选择开启POP3&#x2F;SMTP服务。如下：<br><img src=\"/./../img_23_9_18/img_1.png\" alt=\"img_1.png\"></li>\n<li>拿到授权码</li>\n<li>在settings.py中进行对应的配置</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 发送邮件配置</span><br><span class=\"line\">EMAIL_BACKEND = &#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span><br><span class=\"line\"># smpt服务地址</span><br><span class=\"line\">EMAIL_HOST = &#x27;smtp.qq.com&#x27;</span><br><span class=\"line\">EMAIL_PORT = 25  # 端口默认都是25不需要修改</span><br><span class=\"line\"># 发送邮件的邮箱，需要配置开通SMTP</span><br><span class=\"line\">EMAIL_HOST_USER = &#x27;xxxx@qq.com&#x27;</span><br><span class=\"line\"># 在邮箱中设置的客户端授权密码</span><br><span class=\"line\"># 此处的EMAIL_HOST_PASSWORD是用QQ邮箱授权码登录</span><br><span class=\"line\">EMAIL_HOST_PASSWORD = &#x27;xxxx&#x27;</span><br><span class=\"line\"># 收件人看到的发件人</span><br><span class=\"line\">EMAIL_FROM = &#x27;xxxx@qq.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>调用Django内置的函数</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.core import mail</span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    mail.send_mail(</span><br><span class=\"line\">        subject=&#x27;邮件标题&#x27;,</span><br><span class=\"line\">        message=&#x27;邮件消息&#x27;,</span><br><span class=\"line\">        from_email=&#x27;xxxx@qq.com&#x27; # 发送者,默认为当前配置的邮箱</span><br><span class=\"line\">        recipient_list=[&#x27;xxx@qq.com&#x27;]  # 接收者列表</span><br><span class=\"line\">    )</span><br><span class=\"line\">    return  HttpResponse(&#x27;发送成功&#x27;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Django学习笔记（一）","date":"2023-09-10T09:19:01.000Z","_content":"## Django-admin后台\n\n### 介绍\n\ndjango提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用\n\n### 基本使用\n\n#### 创建超级用户\n\n通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：\n\n```pycon\npython .\\manage.py createsuperuser\n```\n\n创建成功：\n\n```\nUsername (leave blank to use 'administrator'): root\nEmail address: root@qq.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n```\n\n输入对应的url进入到`admin`管理界面：\n[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)  \n如下：  \n![img.png](img_23_9_10/img.png)\n\n#### 中文化界面\n\n在settings文件中设置\n\n```pycon\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n效果:\n![img_1.png](img_23_9_10/img_1.png)\n\n#### 组与权限\n\n我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。\n例如我们可以像下面这么做：\n![img_2.png](img_23_9_10/img_2.png)\n我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。\n\n#### 管理模型类\n\n如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作\n\n1. 在`admin.py`文件中导入对应的模型类\n2. 导入注册的方法\n3. 注册模型\n\n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n# Register your models here.\nadmin.site.register(Author)\n```\n\n效果：  \n![img_3.png](img_23_9_10/img_3.png)\n\n#### 修改显示样式\n\n如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示  \n![img_4.png](img_23_9_10/img_4.png)  \n如果想要优化显示我们只需要在model中添加`__str__`方法,如下：\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(max_length=10)\n    password = models.CharField(max_length=16)\n    telephone = models.CharField(max_length=16)\n\n    def __str__(self):\n        return f'{self.name}-{self.password}-{self.telephone}'\n```\n\n最终效果：\n![img_5.png](img_23_9_10/img_5.png)\n\n#### ModelAdmin 对象\n\n作用:\n为后台管理界面添加便于操作的新功能  \n说明:\n后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类\n\n1. 继承 ModelAdmin 类\n2. 编写对应的操作代码\n3. 注册的时候传递对应的模型已经模型管理类\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n#### 使用register装饰器\n\n对于上面的操作我们可以使用更加简便的装饰器来完成  \n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n```\n\n#### ModelAdmin类属性\n\n##### list_display\n\n添加字段分类\n\n```pycon\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'password', 'telephone']\n```\n\n效果：\n![img_6.png](img_23_9_10/img_6.png)\n需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加`verbose_name`参数\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=10)\n    password = models.CharField(verbose_name='密码', max_length=16)\n    telephone = models.CharField(verbose_name='电话', max_length=16)\n```\n\n效果：\n![img_7.png](img_23_9_10/img_7.png)\n\n##### list_display_links\n\n用于设置点哪个字段会进入到修改页\n\n```pycon\n....\n    list_display_links = ['id']\n....\n```\n\n效果\n![img_8.png](img_23_9_10/img_8.png)\n\n##### list_filter\n\n设置可以用来的分类的字段\n\n```pycon\n....\n    list_filter = ['name']\n....\n```\n\n效果\n![img_9.png](img_23_9_10/img_9.png)\n\n##### search_fields\n\n设置允许搜索的字段\n\n```pycon\n....\n    search_fields = ['id']\n....\n```\n\n效果\n![img_10.png](img_23_9_10/img_10.png)\n\n##### list_editable\n\n添加允许直接在列表中直接修改的字段\n\n```pycon\n....\n    list_editable = ['telephone']\n....\n```\n\n效果：\n![img_11.png](img_23_9_10/img_11.png)\n\n##### 更多\n\n更多字段的作用请查看的官网文档  \n[https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects](https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects)\n\n#### Meta与ModelAdmin类的联动\n\n##### db_table\n\n设置表名\n\n##### verbose_name\n\n设置表名称，能够在admin后台展示\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n```\n\n效果\n![img_12.png](img_23_9_10/img_12.png)\n\n##### verbose_name_plural\n\n上面由于使用了复数形式，所以名称后面带上了s,故为`作者s`，如果我们需要设置这个表复数状态下的名称我们可以使用：\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n        verbose_name_plural = verbose_name\n```\n\n效果：\n![img_13.png](img_23_9_10/img_13.png)\n","source":"_posts/Django学习笔记一.md","raw":"---\ntitle: Django学习笔记（一）\ndate: 2023-09-10 17:19:01\ntags: Django\n---\n## Django-admin后台\n\n### 介绍\n\ndjango提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用\n\n### 基本使用\n\n#### 创建超级用户\n\n通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：\n\n```pycon\npython .\\manage.py createsuperuser\n```\n\n创建成功：\n\n```\nUsername (leave blank to use 'administrator'): root\nEmail address: root@qq.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n```\n\n输入对应的url进入到`admin`管理界面：\n[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)  \n如下：  \n![img.png](img_23_9_10/img.png)\n\n#### 中文化界面\n\n在settings文件中设置\n\n```pycon\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n效果:\n![img_1.png](img_23_9_10/img_1.png)\n\n#### 组与权限\n\n我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。\n例如我们可以像下面这么做：\n![img_2.png](img_23_9_10/img_2.png)\n我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。\n\n#### 管理模型类\n\n如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作\n\n1. 在`admin.py`文件中导入对应的模型类\n2. 导入注册的方法\n3. 注册模型\n\n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n# Register your models here.\nadmin.site.register(Author)\n```\n\n效果：  \n![img_3.png](img_23_9_10/img_3.png)\n\n#### 修改显示样式\n\n如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示  \n![img_4.png](img_23_9_10/img_4.png)  \n如果想要优化显示我们只需要在model中添加`__str__`方法,如下：\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(max_length=10)\n    password = models.CharField(max_length=16)\n    telephone = models.CharField(max_length=16)\n\n    def __str__(self):\n        return f'{self.name}-{self.password}-{self.telephone}'\n```\n\n最终效果：\n![img_5.png](img_23_9_10/img_5.png)\n\n#### ModelAdmin 对象\n\n作用:\n为后台管理界面添加便于操作的新功能  \n说明:\n后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类\n\n1. 继承 ModelAdmin 类\n2. 编写对应的操作代码\n3. 注册的时候传递对应的模型已经模型管理类\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n#### 使用register装饰器\n\n对于上面的操作我们可以使用更加简便的装饰器来完成  \n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n```\n\n#### ModelAdmin类属性\n\n##### list_display\n\n添加字段分类\n\n```pycon\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'password', 'telephone']\n```\n\n效果：\n![img_6.png](img_23_9_10/img_6.png)\n需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加`verbose_name`参数\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=10)\n    password = models.CharField(verbose_name='密码', max_length=16)\n    telephone = models.CharField(verbose_name='电话', max_length=16)\n```\n\n效果：\n![img_7.png](img_23_9_10/img_7.png)\n\n##### list_display_links\n\n用于设置点哪个字段会进入到修改页\n\n```pycon\n....\n    list_display_links = ['id']\n....\n```\n\n效果\n![img_8.png](img_23_9_10/img_8.png)\n\n##### list_filter\n\n设置可以用来的分类的字段\n\n```pycon\n....\n    list_filter = ['name']\n....\n```\n\n效果\n![img_9.png](img_23_9_10/img_9.png)\n\n##### search_fields\n\n设置允许搜索的字段\n\n```pycon\n....\n    search_fields = ['id']\n....\n```\n\n效果\n![img_10.png](img_23_9_10/img_10.png)\n\n##### list_editable\n\n添加允许直接在列表中直接修改的字段\n\n```pycon\n....\n    list_editable = ['telephone']\n....\n```\n\n效果：\n![img_11.png](img_23_9_10/img_11.png)\n\n##### 更多\n\n更多字段的作用请查看的官网文档  \n[https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects](https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects)\n\n#### Meta与ModelAdmin类的联动\n\n##### db_table\n\n设置表名\n\n##### verbose_name\n\n设置表名称，能够在admin后台展示\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n```\n\n效果\n![img_12.png](img_23_9_10/img_12.png)\n\n##### verbose_name_plural\n\n上面由于使用了复数形式，所以名称后面带上了s,故为`作者s`，如果我们需要设置这个表复数状态下的名称我们可以使用：\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n        verbose_name_plural = verbose_name\n```\n\n效果：\n![img_13.png](img_23_9_10/img_13.png)\n","slug":"Django学习笔记一","published":1,"updated":"2023-09-21T15:12:55.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9kr00015otx96o0coxm","content":"<h2 id=\"Django-admin后台\"><a href=\"#Django-admin后台\" class=\"headerlink\" title=\"Django-admin后台\"></a>Django-admin后台</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>django提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><h4 id=\"创建超级用户\"><a href=\"#创建超级用户\" class=\"headerlink\" title=\"创建超级用户\"></a>创建超级用户</h4><p>通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>创建成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username (leave blank to use &#x27;administrator&#x27;): root</span><br><span class=\"line\">Email address: root@qq.com</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Password (again):</span><br><span class=\"line\">Superuser created successfully.</span><br></pre></td></tr></table></figure>\n\n<p>输入对应的url进入到<code>admin</code>管理界面：<br><a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a><br>如下：<br><img src=\"/img_23_9_10/img.png\" alt=\"img.png\"></p>\n<h4 id=\"中文化界面\"><a href=\"#中文化界面\" class=\"headerlink\" title=\"中文化界面\"></a>中文化界面</h4><p>在settings文件中设置</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = &#x27;zh-hans&#x27;</span><br><span class=\"line\">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果:<br><img src=\"/img_23_9_10/img_1.png\" alt=\"img_1.png\"></p>\n<h4 id=\"组与权限\"><a href=\"#组与权限\" class=\"headerlink\" title=\"组与权限\"></a>组与权限</h4><p>我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。<br>例如我们可以像下面这么做：<br><img src=\"/img_23_9_10/img_2.png\" alt=\"img_2.png\"><br>我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。</p>\n<h4 id=\"管理模型类\"><a href=\"#管理模型类\" class=\"headerlink\" title=\"管理模型类\"></a>管理模型类</h4><p>如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作</p>\n<ol>\n<li>在<code>admin.py</code>文件中导入对应的模型类</li>\n<li>导入注册的方法</li>\n<li>注册模型</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\"># Register your models here.</span><br><span class=\"line\">admin.site.register(Author)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_3.png\" alt=\"img_3.png\"></p>\n<h4 id=\"修改显示样式\"><a href=\"#修改显示样式\" class=\"headerlink\" title=\"修改显示样式\"></a>修改显示样式</h4><p>如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示<br><img src=\"/img_23_9_10/img_4.png\" alt=\"img_4.png\"><br>如果想要优化显示我们只需要在model中添加<code>__str__</code>方法,如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=10)</span><br><span class=\"line\">    password = models.CharField(max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(max_length=16)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&#x27;&#123;self.name&#125;-&#123;self.password&#125;-&#123;self.telephone&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最终效果：<br><img src=\"/img_23_9_10/img_5.png\" alt=\"img_5.png\"></p>\n<h4 id=\"ModelAdmin-对象\"><a href=\"#ModelAdmin-对象\" class=\"headerlink\" title=\"ModelAdmin 对象\"></a>ModelAdmin 对象</h4><p>作用:<br>为后台管理界面添加便于操作的新功能<br>说明:<br>后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类</p>\n<ol>\n<li>继承 ModelAdmin 类</li>\n<li>编写对应的操作代码</li>\n<li>注册的时候传递对应的模型已经模型管理类</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Author, AuthorAdmin)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用register装饰器\"><a href=\"#使用register装饰器\" class=\"headerlink\" title=\"使用register装饰器\"></a>使用register装饰器</h4><p>对于上面的操作我们可以使用更加简便的装饰器来完成<br>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ModelAdmin类属性\"><a href=\"#ModelAdmin类属性\" class=\"headerlink\" title=\"ModelAdmin类属性\"></a>ModelAdmin类属性</h4><h5 id=\"list-display\"><a href=\"#list-display\" class=\"headerlink\" title=\"list_display\"></a>list_display</h5><p>添加字段分类</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = [&#x27;id&#x27;, &#x27;name&#x27;, &#x27;password&#x27;, &#x27;telephone&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_6.png\" alt=\"img_6.png\"><br>需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加<code>verbose_name</code>参数</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&#x27;书名&#x27;, max_length=10)</span><br><span class=\"line\">    password = models.CharField(verbose_name=&#x27;密码&#x27;, max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(verbose_name=&#x27;电话&#x27;, max_length=16)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_7.png\" alt=\"img_7.png\"></p>\n<h5 id=\"list-display-links\"><a href=\"#list-display-links\" class=\"headerlink\" title=\"list_display_links\"></a>list_display_links</h5><p>用于设置点哪个字段会进入到修改页</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_display_links = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_8.png\" alt=\"img_8.png\"></p>\n<h5 id=\"list-filter\"><a href=\"#list-filter\" class=\"headerlink\" title=\"list_filter\"></a>list_filter</h5><p>设置可以用来的分类的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_filter = [&#x27;name&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_9.png\" alt=\"img_9.png\"></p>\n<h5 id=\"search-fields\"><a href=\"#search-fields\" class=\"headerlink\" title=\"search_fields\"></a>search_fields</h5><p>设置允许搜索的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    search_fields = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_10.png\" alt=\"img_10.png\"></p>\n<h5 id=\"list-editable\"><a href=\"#list-editable\" class=\"headerlink\" title=\"list_editable\"></a>list_editable</h5><p>添加允许直接在列表中直接修改的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_editable = [&#x27;telephone&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_11.png\" alt=\"img_11.png\"></p>\n<h5 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h5><p>更多字段的作用请查看的官网文档<br><a href=\"https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects\">https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects</a></p>\n<h4 id=\"Meta与ModelAdmin类的联动\"><a href=\"#Meta与ModelAdmin类的联动\" class=\"headerlink\" title=\"Meta与ModelAdmin类的联动\"></a>Meta与ModelAdmin类的联动</h4><h5 id=\"db-table\"><a href=\"#db-table\" class=\"headerlink\" title=\"db_table\"></a>db_table</h5><p>设置表名</p>\n<h5 id=\"verbose-name\"><a href=\"#verbose-name\" class=\"headerlink\" title=\"verbose_name\"></a>verbose_name</h5><p>设置表名称，能够在admin后台展示</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_12.png\" alt=\"img_12.png\"></p>\n<h5 id=\"verbose-name-plural\"><a href=\"#verbose-name-plural\" class=\"headerlink\" title=\"verbose_name_plural\"></a>verbose_name_plural</h5><p>上面由于使用了复数形式，所以名称后面带上了s,故为<code>作者s</code>，如果我们需要设置这个表复数状态下的名称我们可以使用：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br><span class=\"line\">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_13.png\" alt=\"img_13.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Django-admin后台\"><a href=\"#Django-admin后台\" class=\"headerlink\" title=\"Django-admin后台\"></a>Django-admin后台</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>django提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><h4 id=\"创建超级用户\"><a href=\"#创建超级用户\" class=\"headerlink\" title=\"创建超级用户\"></a>创建超级用户</h4><p>通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>创建成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username (leave blank to use &#x27;administrator&#x27;): root</span><br><span class=\"line\">Email address: root@qq.com</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Password (again):</span><br><span class=\"line\">Superuser created successfully.</span><br></pre></td></tr></table></figure>\n\n<p>输入对应的url进入到<code>admin</code>管理界面：<br><a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a><br>如下：<br><img src=\"/img_23_9_10/img.png\" alt=\"img.png\"></p>\n<h4 id=\"中文化界面\"><a href=\"#中文化界面\" class=\"headerlink\" title=\"中文化界面\"></a>中文化界面</h4><p>在settings文件中设置</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = &#x27;zh-hans&#x27;</span><br><span class=\"line\">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果:<br><img src=\"/img_23_9_10/img_1.png\" alt=\"img_1.png\"></p>\n<h4 id=\"组与权限\"><a href=\"#组与权限\" class=\"headerlink\" title=\"组与权限\"></a>组与权限</h4><p>我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。<br>例如我们可以像下面这么做：<br><img src=\"/img_23_9_10/img_2.png\" alt=\"img_2.png\"><br>我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。</p>\n<h4 id=\"管理模型类\"><a href=\"#管理模型类\" class=\"headerlink\" title=\"管理模型类\"></a>管理模型类</h4><p>如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作</p>\n<ol>\n<li>在<code>admin.py</code>文件中导入对应的模型类</li>\n<li>导入注册的方法</li>\n<li>注册模型</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\"># Register your models here.</span><br><span class=\"line\">admin.site.register(Author)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_3.png\" alt=\"img_3.png\"></p>\n<h4 id=\"修改显示样式\"><a href=\"#修改显示样式\" class=\"headerlink\" title=\"修改显示样式\"></a>修改显示样式</h4><p>如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示<br><img src=\"/img_23_9_10/img_4.png\" alt=\"img_4.png\"><br>如果想要优化显示我们只需要在model中添加<code>__str__</code>方法,如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=10)</span><br><span class=\"line\">    password = models.CharField(max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(max_length=16)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&#x27;&#123;self.name&#125;-&#123;self.password&#125;-&#123;self.telephone&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最终效果：<br><img src=\"/img_23_9_10/img_5.png\" alt=\"img_5.png\"></p>\n<h4 id=\"ModelAdmin-对象\"><a href=\"#ModelAdmin-对象\" class=\"headerlink\" title=\"ModelAdmin 对象\"></a>ModelAdmin 对象</h4><p>作用:<br>为后台管理界面添加便于操作的新功能<br>说明:<br>后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类</p>\n<ol>\n<li>继承 ModelAdmin 类</li>\n<li>编写对应的操作代码</li>\n<li>注册的时候传递对应的模型已经模型管理类</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Author, AuthorAdmin)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用register装饰器\"><a href=\"#使用register装饰器\" class=\"headerlink\" title=\"使用register装饰器\"></a>使用register装饰器</h4><p>对于上面的操作我们可以使用更加简便的装饰器来完成<br>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ModelAdmin类属性\"><a href=\"#ModelAdmin类属性\" class=\"headerlink\" title=\"ModelAdmin类属性\"></a>ModelAdmin类属性</h4><h5 id=\"list-display\"><a href=\"#list-display\" class=\"headerlink\" title=\"list_display\"></a>list_display</h5><p>添加字段分类</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = [&#x27;id&#x27;, &#x27;name&#x27;, &#x27;password&#x27;, &#x27;telephone&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_6.png\" alt=\"img_6.png\"><br>需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加<code>verbose_name</code>参数</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&#x27;书名&#x27;, max_length=10)</span><br><span class=\"line\">    password = models.CharField(verbose_name=&#x27;密码&#x27;, max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(verbose_name=&#x27;电话&#x27;, max_length=16)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_7.png\" alt=\"img_7.png\"></p>\n<h5 id=\"list-display-links\"><a href=\"#list-display-links\" class=\"headerlink\" title=\"list_display_links\"></a>list_display_links</h5><p>用于设置点哪个字段会进入到修改页</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_display_links = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_8.png\" alt=\"img_8.png\"></p>\n<h5 id=\"list-filter\"><a href=\"#list-filter\" class=\"headerlink\" title=\"list_filter\"></a>list_filter</h5><p>设置可以用来的分类的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_filter = [&#x27;name&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_9.png\" alt=\"img_9.png\"></p>\n<h5 id=\"search-fields\"><a href=\"#search-fields\" class=\"headerlink\" title=\"search_fields\"></a>search_fields</h5><p>设置允许搜索的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    search_fields = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_10.png\" alt=\"img_10.png\"></p>\n<h5 id=\"list-editable\"><a href=\"#list-editable\" class=\"headerlink\" title=\"list_editable\"></a>list_editable</h5><p>添加允许直接在列表中直接修改的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_editable = [&#x27;telephone&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_11.png\" alt=\"img_11.png\"></p>\n<h5 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h5><p>更多字段的作用请查看的官网文档<br><a href=\"https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects\">https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects</a></p>\n<h4 id=\"Meta与ModelAdmin类的联动\"><a href=\"#Meta与ModelAdmin类的联动\" class=\"headerlink\" title=\"Meta与ModelAdmin类的联动\"></a>Meta与ModelAdmin类的联动</h4><h5 id=\"db-table\"><a href=\"#db-table\" class=\"headerlink\" title=\"db_table\"></a>db_table</h5><p>设置表名</p>\n<h5 id=\"verbose-name\"><a href=\"#verbose-name\" class=\"headerlink\" title=\"verbose_name\"></a>verbose_name</h5><p>设置表名称，能够在admin后台展示</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_12.png\" alt=\"img_12.png\"></p>\n<h5 id=\"verbose-name-plural\"><a href=\"#verbose-name-plural\" class=\"headerlink\" title=\"verbose_name_plural\"></a>verbose_name_plural</h5><p>上面由于使用了复数形式，所以名称后面带上了s,故为<code>作者s</code>，如果我们需要设置这个表复数状态下的名称我们可以使用：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br><span class=\"line\">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_13.png\" alt=\"img_13.png\"></p>\n"},{"title":"Django学习笔记（二）","date":"2023-09-15T15:31:52.000Z","_content":"# Django缓存\n\n## 基本介绍\n\n动态网站的基本权衡是，嗯，它们是动态的。每 当用户请求页面时，Web 服务器会进行各种计算—— 从数据库查询到模板呈现再到业务逻辑 -- 创建 您网站的访问者看到的页面。这要贵得多，从一个 处理开销透视，比您的标准\n从文件系统服务器中读取文件。\n\n对于大多数 Web 应用程序来说，这种开销没什么大不了的。大多数网络 应用程序不是 OR ;他们很小—— 到流量一般的中型网站。但对于中高流量 站点，必须尽可能多地削减开销。 这就是缓存的用武之地。\n\n缓存某些东西就是保存昂贵计算的结果，以便 下次不必执行计算。这是一些伪代码 解释这将如何用于动态生成的网页：\n\n```pycon\ngiven a URL, try finding that page in the cache\nif the page is in the cache:\n    return the cached page\nelse:\n    generate the page\n    save the generated page in the cache (for next time)\n    return the generated page\n```\n\n## 基本使用\n\n### 设置缓存的介质\n\ndjango框架提供了多种缓存介质用于缓存的那些经常不变化的数据，常见的有以下几种：\n\n1. 数据库缓存\n\n尽管的存储介质没有更换，但是会把一次负责查询的结果直接存储到表中，例如多个条件过滤的结果，可以避免重复查询，提升效率。\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\", # 缓存的表名\n        \"TIMEOUT\":300, # 设置缓存的时间，单位秒\n        \"POTIONS\":{\n            \"MAX_ENTRIES\":300, # 缓存最大数据条数\n            \"CULL_FREQUENCY\":2 # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2\n        }\n    }\n}\n```\n\n执行命令 python manage.py createcachetable 这会在数据库中创建一个表，名字由`LOCATION`决定。\n\n2. 本地内存缓存（测试使用）\n\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"unique-snowflake\",\n    }\n}\n```\n\n3. 本地文件缓存\n\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"/var/tmp/django_cache\", # 文件夹路径\n        #  \"LOCATION\": \"c:/foo/bar\", windows下\n    }\n}\n```\n\n4. redis内存型数据库缓存（后面详细介绍）\n\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379\",\n    }\n}\n```\n\n### 缓存表结构\n\n使用数据库缓存一般创建出来的表结构为：\nfield&emsp;&emsp;&emsp;&emsp;&emsp;type  \ncache_key&emsp;&emsp;varchar(255)  \nvalue&emsp;&emsp;&emsp;&emsp;&nbsp; longtext  \nexpires&emsp;&emsp;&emsp;&nbsp; datetime(6)\n\n### 整体缓存策略\n\n#### 视图函数\n\n使用Django提供的`cache_page`装饰器,可以装饰某个视图函数,并且将这个函数加入到缓存中\n\n```pycon\nfrom django.http import HttpResponse\nimport time\nfrom django.views.decorators.cache import cache_page\n# 传入的参数为过期时间,单位为S\n@cache_page(15)\ndef cache_test(request):\n    t = time.time()\n    return HttpResponse(f'{t}')\n```\n\n#### 路由\n\n如果不在意视图函数的细节,我们可以直接在路由层面来进行缓存,如下:\n\n```pycon\nfrom django.urls import path\nfrom . import views\nfrom django.views.decorators.cache import cache_page\n\napp_name = 'front'\nurlpatterns = [\n    path('', cache_page(15)(views.cache_test), name='test')\n]\n\n```\n\n### 局部缓存策略\n\n相比于上面的视图缓存,粒度更加细化。\n\n方式一：\n使用`caches`加载一个缓存配置项，得到一个`cache`缓存对象，此时可以通过缓存对象存储数据。如下：\n\n```pycon\n# settings 文件\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\",\n        \"TIMEOUT\": 300,  # 设置缓存的时间，单位秒\n        \"POTIONS\": {\n            \"MAX_ENTRIES\": 300,  # 缓存最大数据条数\n            \"CULL_FREQUENCY\": 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2\n        }\n    },\n    \"front\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\",\n        \"TIMEOUT\": 300,  # 设置缓存的时间，单位秒\n        \"POTIONS\": {\n            \"MAX_ENTRIES\": 300,  # 缓存最大数据条数\n            \"CULL_FREQUENCY\": 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2\n        }\n    }\n}\n\n# views.py\nfrom django.core.cache import caches\ndef cache_test(request):\n    cache = caches['front']\n```\n\n方式二：\n使用`cache`无需传递配置名，直接加载default选项配置的缓存\n\n```pycon\nfrom django.core.cache import cache\n\ndef cache_test(request):\n    pass\n```\n\n#### cache的方法\n\n1. set  \n   第一个参数为key,第二个为具体的value,第三个是过期时间\n\n```pycon\ncache.set('my_key', 'hello, world!', 30)\n```\n\n2. get  \n   传递一个key值得到对应的缓存数据，如果缓存的数据消失，那么此时返回None\n\n```pycon\ncache.get(\"my_key\")\n```\n\n3. add  \n   添加一个键值对数据的到缓存，与set不同，add只有当key不存在的时候才能成功设置值\n\n```pycon\ncache.add(\"add_key\", \"New value\")\n```\n\n4. get_or_set  \n   如果获取的值不存在则执行set\n5. set_many  \n   批量存储键值对数据\n6. set_many  \n   批量设置数据\n7. delete  \n   删除成功返回True否则返回False\n\n```pycon\ncache.delete(\"a\")\n```\n\n8. delete_many  \n   批量删除数据\n\n### 浏览器缓存\n\n#### 强缓存\n\n使用响应头`Cache-Control`，浏览器会缓存当前网页，下次请求的时候就不会请求服务器，而是直接从本地缓存中读取网页。\n\n```http-header\nCache-Control:max-age:120\n```\n\n上面代表浏览器缓存120秒，失效后才会去重新向服务器拿取资源。  \n在Django中如果我们使用了`cache_page`装饰器，那么在响应头中会自动添加Cache-Control，很方便。\n\n#### 协商缓存\n\n主要针对图片，视频等大的文件，图片等资源不易变化，到期后浏览器会跟服务器协商，查看当前缓存是否可用，如果可用那么此时服务器不必返回数据，否则返回最新图片数据即可。  \n协商缓存在强缓存的基础上来完成，靠`Last-Modified`头完成（值为最近修改时间），服务器返回此头信息则代表此文件需要协商缓存。图片到期，浏览器将`Last-Modified`的值作为\n`If-Last-Modified`请求头的值，发送给服务器协商是否需要更新，如果服务器返回`304`则代表继续缓存，返回`200`代表需要更新，并且响应体为最新的资源。\n\n现在主流协商方案使用的是`ETag`请求头和`If-None-Match`请求头，此方案靠Hash值来判断文件是否产生了变化。此响应头优先级大于`Last-Modified`。\n","source":"_posts/Django学习笔记二.md","raw":"---\ntitle: Django学习笔记（二）\ndate: 2023-09-15 23:31:52\ntags: Django\n---\n# Django缓存\n\n## 基本介绍\n\n动态网站的基本权衡是，嗯，它们是动态的。每 当用户请求页面时，Web 服务器会进行各种计算—— 从数据库查询到模板呈现再到业务逻辑 -- 创建 您网站的访问者看到的页面。这要贵得多，从一个 处理开销透视，比您的标准\n从文件系统服务器中读取文件。\n\n对于大多数 Web 应用程序来说，这种开销没什么大不了的。大多数网络 应用程序不是 OR ;他们很小—— 到流量一般的中型网站。但对于中高流量 站点，必须尽可能多地削减开销。 这就是缓存的用武之地。\n\n缓存某些东西就是保存昂贵计算的结果，以便 下次不必执行计算。这是一些伪代码 解释这将如何用于动态生成的网页：\n\n```pycon\ngiven a URL, try finding that page in the cache\nif the page is in the cache:\n    return the cached page\nelse:\n    generate the page\n    save the generated page in the cache (for next time)\n    return the generated page\n```\n\n## 基本使用\n\n### 设置缓存的介质\n\ndjango框架提供了多种缓存介质用于缓存的那些经常不变化的数据，常见的有以下几种：\n\n1. 数据库缓存\n\n尽管的存储介质没有更换，但是会把一次负责查询的结果直接存储到表中，例如多个条件过滤的结果，可以避免重复查询，提升效率。\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\", # 缓存的表名\n        \"TIMEOUT\":300, # 设置缓存的时间，单位秒\n        \"POTIONS\":{\n            \"MAX_ENTRIES\":300, # 缓存最大数据条数\n            \"CULL_FREQUENCY\":2 # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2\n        }\n    }\n}\n```\n\n执行命令 python manage.py createcachetable 这会在数据库中创建一个表，名字由`LOCATION`决定。\n\n2. 本地内存缓存（测试使用）\n\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.locmem.LocMemCache\",\n        \"LOCATION\": \"unique-snowflake\",\n    }\n}\n```\n\n3. 本地文件缓存\n\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.filebased.FileBasedCache\",\n        \"LOCATION\": \"/var/tmp/django_cache\", # 文件夹路径\n        #  \"LOCATION\": \"c:/foo/bar\", windows下\n    }\n}\n```\n\n4. redis内存型数据库缓存（后面详细介绍）\n\n配置如下：\n\n```pycon\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.redis.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379\",\n    }\n}\n```\n\n### 缓存表结构\n\n使用数据库缓存一般创建出来的表结构为：\nfield&emsp;&emsp;&emsp;&emsp;&emsp;type  \ncache_key&emsp;&emsp;varchar(255)  \nvalue&emsp;&emsp;&emsp;&emsp;&nbsp; longtext  \nexpires&emsp;&emsp;&emsp;&nbsp; datetime(6)\n\n### 整体缓存策略\n\n#### 视图函数\n\n使用Django提供的`cache_page`装饰器,可以装饰某个视图函数,并且将这个函数加入到缓存中\n\n```pycon\nfrom django.http import HttpResponse\nimport time\nfrom django.views.decorators.cache import cache_page\n# 传入的参数为过期时间,单位为S\n@cache_page(15)\ndef cache_test(request):\n    t = time.time()\n    return HttpResponse(f'{t}')\n```\n\n#### 路由\n\n如果不在意视图函数的细节,我们可以直接在路由层面来进行缓存,如下:\n\n```pycon\nfrom django.urls import path\nfrom . import views\nfrom django.views.decorators.cache import cache_page\n\napp_name = 'front'\nurlpatterns = [\n    path('', cache_page(15)(views.cache_test), name='test')\n]\n\n```\n\n### 局部缓存策略\n\n相比于上面的视图缓存,粒度更加细化。\n\n方式一：\n使用`caches`加载一个缓存配置项，得到一个`cache`缓存对象，此时可以通过缓存对象存储数据。如下：\n\n```pycon\n# settings 文件\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\",\n        \"TIMEOUT\": 300,  # 设置缓存的时间，单位秒\n        \"POTIONS\": {\n            \"MAX_ENTRIES\": 300,  # 缓存最大数据条数\n            \"CULL_FREQUENCY\": 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2\n        }\n    },\n    \"front\": {\n        \"BACKEND\": \"django.core.cache.backends.db.DatabaseCache\",\n        \"LOCATION\": \"my_cache_table\",\n        \"TIMEOUT\": 300,  # 设置缓存的时间，单位秒\n        \"POTIONS\": {\n            \"MAX_ENTRIES\": 300,  # 缓存最大数据条数\n            \"CULL_FREQUENCY\": 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2\n        }\n    }\n}\n\n# views.py\nfrom django.core.cache import caches\ndef cache_test(request):\n    cache = caches['front']\n```\n\n方式二：\n使用`cache`无需传递配置名，直接加载default选项配置的缓存\n\n```pycon\nfrom django.core.cache import cache\n\ndef cache_test(request):\n    pass\n```\n\n#### cache的方法\n\n1. set  \n   第一个参数为key,第二个为具体的value,第三个是过期时间\n\n```pycon\ncache.set('my_key', 'hello, world!', 30)\n```\n\n2. get  \n   传递一个key值得到对应的缓存数据，如果缓存的数据消失，那么此时返回None\n\n```pycon\ncache.get(\"my_key\")\n```\n\n3. add  \n   添加一个键值对数据的到缓存，与set不同，add只有当key不存在的时候才能成功设置值\n\n```pycon\ncache.add(\"add_key\", \"New value\")\n```\n\n4. get_or_set  \n   如果获取的值不存在则执行set\n5. set_many  \n   批量存储键值对数据\n6. set_many  \n   批量设置数据\n7. delete  \n   删除成功返回True否则返回False\n\n```pycon\ncache.delete(\"a\")\n```\n\n8. delete_many  \n   批量删除数据\n\n### 浏览器缓存\n\n#### 强缓存\n\n使用响应头`Cache-Control`，浏览器会缓存当前网页，下次请求的时候就不会请求服务器，而是直接从本地缓存中读取网页。\n\n```http-header\nCache-Control:max-age:120\n```\n\n上面代表浏览器缓存120秒，失效后才会去重新向服务器拿取资源。  \n在Django中如果我们使用了`cache_page`装饰器，那么在响应头中会自动添加Cache-Control，很方便。\n\n#### 协商缓存\n\n主要针对图片，视频等大的文件，图片等资源不易变化，到期后浏览器会跟服务器协商，查看当前缓存是否可用，如果可用那么此时服务器不必返回数据，否则返回最新图片数据即可。  \n协商缓存在强缓存的基础上来完成，靠`Last-Modified`头完成（值为最近修改时间），服务器返回此头信息则代表此文件需要协商缓存。图片到期，浏览器将`Last-Modified`的值作为\n`If-Last-Modified`请求头的值，发送给服务器协商是否需要更新，如果服务器返回`304`则代表继续缓存，返回`200`代表需要更新，并且响应体为最新的资源。\n\n现在主流协商方案使用的是`ETag`请求头和`If-None-Match`请求头，此方案靠Hash值来判断文件是否产生了变化。此响应头优先级大于`Last-Modified`。\n","slug":"Django学习笔记二","published":1,"updated":"2023-09-15T15:33:57.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9ku00035otx04ci4ts7","content":"<h1 id=\"Django缓存\"><a href=\"#Django缓存\" class=\"headerlink\" title=\"Django缓存\"></a>Django缓存</h1><h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>动态网站的基本权衡是，嗯，它们是动态的。每 当用户请求页面时，Web 服务器会进行各种计算—— 从数据库查询到模板呈现再到业务逻辑 – 创建 您网站的访问者看到的页面。这要贵得多，从一个 处理开销透视，比您的标准<br>从文件系统服务器中读取文件。</p>\n<p>对于大多数 Web 应用程序来说，这种开销没什么大不了的。大多数网络 应用程序不是 OR ;他们很小—— 到流量一般的中型网站。但对于中高流量 站点，必须尽可能多地削减开销。 这就是缓存的用武之地。</p>\n<p>缓存某些东西就是保存昂贵计算的结果，以便 下次不必执行计算。这是一些伪代码 解释这将如何用于动态生成的网页：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">given a URL, try finding that page in the cache</span><br><span class=\"line\">if the page is in the cache:</span><br><span class=\"line\">    return the cached page</span><br><span class=\"line\">else:</span><br><span class=\"line\">    generate the page</span><br><span class=\"line\">    save the generated page in the cache (for next time)</span><br><span class=\"line\">    return the generated page</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"设置缓存的介质\"><a href=\"#设置缓存的介质\" class=\"headerlink\" title=\"设置缓存的介质\"></a>设置缓存的介质</h3><p>django框架提供了多种缓存介质用于缓存的那些经常不变化的数据，常见的有以下几种：</p>\n<ol>\n<li>数据库缓存</li>\n</ol>\n<p>尽管的存储介质没有更换，但是会把一次负责查询的结果直接存储到表中，例如多个条件过滤的结果，可以避免重复查询，提升效率。<br>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.db.DatabaseCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;my_cache_table&quot;, # 缓存的表名</span><br><span class=\"line\">        &quot;TIMEOUT&quot;:300, # 设置缓存的时间，单位秒</span><br><span class=\"line\">        &quot;POTIONS&quot;:&#123;</span><br><span class=\"line\">            &quot;MAX_ENTRIES&quot;:300, # 缓存最大数据条数</span><br><span class=\"line\">            &quot;CULL_FREQUENCY&quot;:2 # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令 python manage.py createcachetable 这会在数据库中创建一个表，名字由<code>LOCATION</code>决定。</p>\n<ol start=\"2\">\n<li>本地内存缓存（测试使用）</li>\n</ol>\n<p>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.locmem.LocMemCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;unique-snowflake&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>本地文件缓存</li>\n</ol>\n<p>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.filebased.FileBasedCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;/var/tmp/django_cache&quot;, # 文件夹路径</span><br><span class=\"line\">        #  &quot;LOCATION&quot;: &quot;c:/foo/bar&quot;, windows下</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>redis内存型数据库缓存（后面详细介绍）</li>\n</ol>\n<p>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.redis.RedisCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓存表结构\"><a href=\"#缓存表结构\" class=\"headerlink\" title=\"缓存表结构\"></a>缓存表结构</h3><p>使用数据库缓存一般创建出来的表结构为：<br>field&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;type<br>cache_key&amp;emsp;&amp;emsp;varchar(255)<br>value&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp; longtext<br>expires&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp; datetime(6)</p>\n<h3 id=\"整体缓存策略\"><a href=\"#整体缓存策略\" class=\"headerlink\" title=\"整体缓存策略\"></a>整体缓存策略</h3><h4 id=\"视图函数\"><a href=\"#视图函数\" class=\"headerlink\" title=\"视图函数\"></a>视图函数</h4><p>使用Django提供的<code>cache_page</code>装饰器,可以装饰某个视图函数,并且将这个函数加入到缓存中</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.http import HttpResponse</span><br><span class=\"line\">import time</span><br><span class=\"line\">from django.views.decorators.cache import cache_page</span><br><span class=\"line\"># 传入的参数为过期时间,单位为S</span><br><span class=\"line\">@cache_page(15)</span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    t = time.time()</span><br><span class=\"line\">    return HttpResponse(f&#x27;&#123;t&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p>如果不在意视图函数的细节,我们可以直接在路由层面来进行缓存,如下:</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.urls import path</span><br><span class=\"line\">from . import views</span><br><span class=\"line\">from django.views.decorators.cache import cache_page</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = &#x27;front&#x27;</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(&#x27;&#x27;, cache_page(15)(views.cache_test), name=&#x27;test&#x27;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部缓存策略\"><a href=\"#局部缓存策略\" class=\"headerlink\" title=\"局部缓存策略\"></a>局部缓存策略</h3><p>相比于上面的视图缓存,粒度更加细化。</p>\n<p>方式一：<br>使用<code>caches</code>加载一个缓存配置项，得到一个<code>cache</code>缓存对象，此时可以通过缓存对象存储数据。如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># settings 文件</span><br><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.db.DatabaseCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;my_cache_table&quot;,</span><br><span class=\"line\">        &quot;TIMEOUT&quot;: 300,  # 设置缓存的时间，单位秒</span><br><span class=\"line\">        &quot;POTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;MAX_ENTRIES&quot;: 300,  # 缓存最大数据条数</span><br><span class=\"line\">            &quot;CULL_FREQUENCY&quot;: 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;front&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.db.DatabaseCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;my_cache_table&quot;,</span><br><span class=\"line\">        &quot;TIMEOUT&quot;: 300,  # 设置缓存的时间，单位秒</span><br><span class=\"line\">        &quot;POTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;MAX_ENTRIES&quot;: 300,  # 缓存最大数据条数</span><br><span class=\"line\">            &quot;CULL_FREQUENCY&quot;: 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># views.py</span><br><span class=\"line\">from django.core.cache import caches</span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    cache = caches[&#x27;front&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>方式二：<br>使用<code>cache</code>无需传递配置名，直接加载default选项配置的缓存</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.core.cache import cache</span><br><span class=\"line\"></span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"cache的方法\"><a href=\"#cache的方法\" class=\"headerlink\" title=\"cache的方法\"></a>cache的方法</h4><ol>\n<li>set<br>第一个参数为key,第二个为具体的value,第三个是过期时间</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.set(&#x27;my_key&#x27;, &#x27;hello, world!&#x27;, 30)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>get<br>传递一个key值得到对应的缓存数据，如果缓存的数据消失，那么此时返回None</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.get(&quot;my_key&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>add<br>添加一个键值对数据的到缓存，与set不同，add只有当key不存在的时候才能成功设置值</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.add(&quot;add_key&quot;, &quot;New value&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>get_or_set<br>如果获取的值不存在则执行set</li>\n<li>set_many<br>批量存储键值对数据</li>\n<li>set_many<br>批量设置数据</li>\n<li>delete<br>删除成功返回True否则返回False</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.delete(&quot;a&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>delete_many<br>批量删除数据</li>\n</ol>\n<h3 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h3><h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><p>使用响应头<code>Cache-Control</code>，浏览器会缓存当前网页，下次请求的时候就不会请求服务器，而是直接从本地缓存中读取网页。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:max-age:120</span><br></pre></td></tr></table></figure>\n\n<p>上面代表浏览器缓存120秒，失效后才会去重新向服务器拿取资源。<br>在Django中如果我们使用了<code>cache_page</code>装饰器，那么在响应头中会自动添加Cache-Control，很方便。</p>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><p>主要针对图片，视频等大的文件，图片等资源不易变化，到期后浏览器会跟服务器协商，查看当前缓存是否可用，如果可用那么此时服务器不必返回数据，否则返回最新图片数据即可。<br>协商缓存在强缓存的基础上来完成，靠<code>Last-Modified</code>头完成（值为最近修改时间），服务器返回此头信息则代表此文件需要协商缓存。图片到期，浏览器将<code>Last-Modified</code>的值作为<br><code>If-Last-Modified</code>请求头的值，发送给服务器协商是否需要更新，如果服务器返回<code>304</code>则代表继续缓存，返回<code>200</code>代表需要更新，并且响应体为最新的资源。</p>\n<p>现在主流协商方案使用的是<code>ETag</code>请求头和<code>If-None-Match</code>请求头，此方案靠Hash值来判断文件是否产生了变化。此响应头优先级大于<code>Last-Modified</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Django缓存\"><a href=\"#Django缓存\" class=\"headerlink\" title=\"Django缓存\"></a>Django缓存</h1><h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>动态网站的基本权衡是，嗯，它们是动态的。每 当用户请求页面时，Web 服务器会进行各种计算—— 从数据库查询到模板呈现再到业务逻辑 – 创建 您网站的访问者看到的页面。这要贵得多，从一个 处理开销透视，比您的标准<br>从文件系统服务器中读取文件。</p>\n<p>对于大多数 Web 应用程序来说，这种开销没什么大不了的。大多数网络 应用程序不是 OR ;他们很小—— 到流量一般的中型网站。但对于中高流量 站点，必须尽可能多地削减开销。 这就是缓存的用武之地。</p>\n<p>缓存某些东西就是保存昂贵计算的结果，以便 下次不必执行计算。这是一些伪代码 解释这将如何用于动态生成的网页：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">given a URL, try finding that page in the cache</span><br><span class=\"line\">if the page is in the cache:</span><br><span class=\"line\">    return the cached page</span><br><span class=\"line\">else:</span><br><span class=\"line\">    generate the page</span><br><span class=\"line\">    save the generated page in the cache (for next time)</span><br><span class=\"line\">    return the generated page</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"设置缓存的介质\"><a href=\"#设置缓存的介质\" class=\"headerlink\" title=\"设置缓存的介质\"></a>设置缓存的介质</h3><p>django框架提供了多种缓存介质用于缓存的那些经常不变化的数据，常见的有以下几种：</p>\n<ol>\n<li>数据库缓存</li>\n</ol>\n<p>尽管的存储介质没有更换，但是会把一次负责查询的结果直接存储到表中，例如多个条件过滤的结果，可以避免重复查询，提升效率。<br>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.db.DatabaseCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;my_cache_table&quot;, # 缓存的表名</span><br><span class=\"line\">        &quot;TIMEOUT&quot;:300, # 设置缓存的时间，单位秒</span><br><span class=\"line\">        &quot;POTIONS&quot;:&#123;</span><br><span class=\"line\">            &quot;MAX_ENTRIES&quot;:300, # 缓存最大数据条数</span><br><span class=\"line\">            &quot;CULL_FREQUENCY&quot;:2 # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令 python manage.py createcachetable 这会在数据库中创建一个表，名字由<code>LOCATION</code>决定。</p>\n<ol start=\"2\">\n<li>本地内存缓存（测试使用）</li>\n</ol>\n<p>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.locmem.LocMemCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;unique-snowflake&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>本地文件缓存</li>\n</ol>\n<p>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.filebased.FileBasedCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;/var/tmp/django_cache&quot;, # 文件夹路径</span><br><span class=\"line\">        #  &quot;LOCATION&quot;: &quot;c:/foo/bar&quot;, windows下</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>redis内存型数据库缓存（后面详细介绍）</li>\n</ol>\n<p>配置如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.redis.RedisCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓存表结构\"><a href=\"#缓存表结构\" class=\"headerlink\" title=\"缓存表结构\"></a>缓存表结构</h3><p>使用数据库缓存一般创建出来的表结构为：<br>field&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;type<br>cache_key&amp;emsp;&amp;emsp;varchar(255)<br>value&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp; longtext<br>expires&amp;emsp;&amp;emsp;&amp;emsp;&amp;nbsp; datetime(6)</p>\n<h3 id=\"整体缓存策略\"><a href=\"#整体缓存策略\" class=\"headerlink\" title=\"整体缓存策略\"></a>整体缓存策略</h3><h4 id=\"视图函数\"><a href=\"#视图函数\" class=\"headerlink\" title=\"视图函数\"></a>视图函数</h4><p>使用Django提供的<code>cache_page</code>装饰器,可以装饰某个视图函数,并且将这个函数加入到缓存中</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.http import HttpResponse</span><br><span class=\"line\">import time</span><br><span class=\"line\">from django.views.decorators.cache import cache_page</span><br><span class=\"line\"># 传入的参数为过期时间,单位为S</span><br><span class=\"line\">@cache_page(15)</span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    t = time.time()</span><br><span class=\"line\">    return HttpResponse(f&#x27;&#123;t&#125;&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h4><p>如果不在意视图函数的细节,我们可以直接在路由层面来进行缓存,如下:</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.urls import path</span><br><span class=\"line\">from . import views</span><br><span class=\"line\">from django.views.decorators.cache import cache_page</span><br><span class=\"line\"></span><br><span class=\"line\">app_name = &#x27;front&#x27;</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(&#x27;&#x27;, cache_page(15)(views.cache_test), name=&#x27;test&#x27;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部缓存策略\"><a href=\"#局部缓存策略\" class=\"headerlink\" title=\"局部缓存策略\"></a>局部缓存策略</h3><p>相比于上面的视图缓存,粒度更加细化。</p>\n<p>方式一：<br>使用<code>caches</code>加载一个缓存配置项，得到一个<code>cache</code>缓存对象，此时可以通过缓存对象存储数据。如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># settings 文件</span><br><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.db.DatabaseCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;my_cache_table&quot;,</span><br><span class=\"line\">        &quot;TIMEOUT&quot;: 300,  # 设置缓存的时间，单位秒</span><br><span class=\"line\">        &quot;POTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;MAX_ENTRIES&quot;: 300,  # 缓存最大数据条数</span><br><span class=\"line\">            &quot;CULL_FREQUENCY&quot;: 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;front&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django.core.cache.backends.db.DatabaseCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;my_cache_table&quot;,</span><br><span class=\"line\">        &quot;TIMEOUT&quot;: 300,  # 设置缓存的时间，单位秒</span><br><span class=\"line\">        &quot;POTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;MAX_ENTRIES&quot;: 300,  # 缓存最大数据条数</span><br><span class=\"line\">            &quot;CULL_FREQUENCY&quot;: 2  # 缓存达到最大数据条时，删除的数据量 1/x，此处为 1/2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># views.py</span><br><span class=\"line\">from django.core.cache import caches</span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    cache = caches[&#x27;front&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>方式二：<br>使用<code>cache</code>无需传递配置名，直接加载default选项配置的缓存</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.core.cache import cache</span><br><span class=\"line\"></span><br><span class=\"line\">def cache_test(request):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"cache的方法\"><a href=\"#cache的方法\" class=\"headerlink\" title=\"cache的方法\"></a>cache的方法</h4><ol>\n<li>set<br>第一个参数为key,第二个为具体的value,第三个是过期时间</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.set(&#x27;my_key&#x27;, &#x27;hello, world!&#x27;, 30)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>get<br>传递一个key值得到对应的缓存数据，如果缓存的数据消失，那么此时返回None</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.get(&quot;my_key&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>add<br>添加一个键值对数据的到缓存，与set不同，add只有当key不存在的时候才能成功设置值</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.add(&quot;add_key&quot;, &quot;New value&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>get_or_set<br>如果获取的值不存在则执行set</li>\n<li>set_many<br>批量存储键值对数据</li>\n<li>set_many<br>批量设置数据</li>\n<li>delete<br>删除成功返回True否则返回False</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache.delete(&quot;a&quot;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>delete_many<br>批量删除数据</li>\n</ol>\n<h3 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h3><h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><p>使用响应头<code>Cache-Control</code>，浏览器会缓存当前网页，下次请求的时候就不会请求服务器，而是直接从本地缓存中读取网页。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:max-age:120</span><br></pre></td></tr></table></figure>\n\n<p>上面代表浏览器缓存120秒，失效后才会去重新向服务器拿取资源。<br>在Django中如果我们使用了<code>cache_page</code>装饰器，那么在响应头中会自动添加Cache-Control，很方便。</p>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><p>主要针对图片，视频等大的文件，图片等资源不易变化，到期后浏览器会跟服务器协商，查看当前缓存是否可用，如果可用那么此时服务器不必返回数据，否则返回最新图片数据即可。<br>协商缓存在强缓存的基础上来完成，靠<code>Last-Modified</code>头完成（值为最近修改时间），服务器返回此头信息则代表此文件需要协商缓存。图片到期，浏览器将<code>Last-Modified</code>的值作为<br><code>If-Last-Modified</code>请求头的值，发送给服务器协商是否需要更新，如果服务器返回<code>304</code>则代表继续缓存，返回<code>200</code>代表需要更新，并且响应体为最新的资源。</p>\n<p>现在主流协商方案使用的是<code>ETag</code>请求头和<code>If-None-Match</code>请求头，此方案靠Hash值来判断文件是否产生了变化。此响应头优先级大于<code>Last-Modified</code>。</p>\n"},{"title":"Django学习笔记（四）","date":"2023-09-21T15:09:26.000Z","_content":"# Celery结合Django\n\n## 验证码功能的实现\n\n1. 注册容联云,获取对应`AUTH＿TOKEN`,查看接入文档\n\n```pycon\n对应接入指南：https://doc.yuntongxun.com/p/5a531a353b8496dd00dcdfe2\n```\n\n2. 使用容联通云sdk\n\n```pycon\n# pip install pip install ronglian_sms_sdk\n# 初始化SDK\nsdk = SmsSDK(accId, accToken, appId)\n#  调用发送短信方法,data为元组,是需要传递到短信模板中的数据\nsdk.sendMessage(tid, mobile, datas)\n```\n\n3. 验证码功能的流程  \n   发送Ajax请求到后端1，前端页面 点击“免费获取验证码\"后端接到请求后  \n   1,生成随机验证码  \n   2,存储验证码  \n   3,发送验证码  \n   注册时，需要提交验证码，并在注册逻辑中对比验证码是否正确。\n4. 完成前端代码:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>发送短信</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js\"></script>\n</head>\n\n<body>\n<div class=\"modal-body\">\n    <form class=\"container\" id=\"loginform\">\n        <div class=\"form-group row\">\n            <div class=\"col-sm-1\"></div>\n            <label class=\"col-sm-3 col-form-label\">短信验证</label>\n            <div class=\"col-sm-7\">\n                <div class=\"input-group input-group-sm\">\n                    <input type=\"text\" class=\"form-control\" id=\"captcha\" name=\"captcha\">\n                    <span class=\"input-group-append\">\n                                        <button type=\"button\" class=\"btn btn-info btn-flat\" id=\"captchabtn\"\n                                                onclick=\"sendcaptcha()\">发送验证码</button>\n                                    </span>\n                </div>\n            </div>\n        </div>\n    </form>\n    <!-- /.card-body -->\n</div>\n<div class=\"modal-footer justify-content-between\">\n    <div id=\"loginerror\" class=\"text-danger\"></div>\n    <button type=\"button\" class=\"btn btn-info\" onclick=\"login()\">注册账号</button>\n</div>\n\n<script>\n    /* 倒计时效果函数 */\n    function SmsTimer() {\n        // 将标签设置为不可点击的\n        // jquery 的变量一般以 $ 开头\n        var $btnEle = $('#captchabtn');\n        $btnEle.attr(\"disabled\",true);\n        // 设置定时器读秒效果和标签文本内容的修改\n        var timer = 60;\n        var t = setInterval(\n            function () {\n                $btnEle.text(`${timer}秒后重新发送`);\n                timer--;\n                // 如果小于0就将定时器清除并且将$btnEle设置为可操作\n                if (timer <= 0) {\n                    clearInterval(t);\n                    $btnEle.text('发送验证码');\n                    $btnEle.attr('disabled', false);\n                }\n            },\n            1000 // 1秒中执行一次这个函数\n        )\n    }\n    /* 发送手机短信验证码 */\n    function sendcaptcha() {\n        var mobile = $('#captcha').val();\n        console.log(mobile)\n        var mobilereg = /^(0|86|17951)?(13[0-9]|15[012356789]|17[0-8]|18[0-9]|14[5679]|19[189]|16[56])[0-9]{8}$/;\n        if (mobile.length == 11 &&  mobilereg.test(mobile)) {\n            $.ajax({\n                url: '{% url 'front:index' %}',\n                type:'post',\n                data: {\n                    'mobile': mobile,\n                },\n                success: function (data) {\n                    if (data['status'] === 'success'){\n                        SmsTimer()\n                    }else {\n                        alert('未成')\n                    }\n                }\n            })\n        }else {\n            alert('手机号码错误')\n        }\n    }\n</script>\n</body>\n</html>\n```\n\n5. 完成redis缓存的配置\n   使用redis作为缓存介质,存储短信验证码并且设置缓存的时间。\n\n```pycon\n# redis配置缓存\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT CLASS\": \"django_redis.client.DefaultClient\",\n            \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}\n        }\n    }\n}\n```\n\n6. 编写View视图功能代码\n\n```pycon\n# utils.py\nfrom ronglian_sms_sdk import SmsSDK\ndef send_message(phone, message):\n    sdk = SmsSDK('xxxxx', 'xxxxxx',\n                 'xxxxxx')\n    data = sdk.sendMessage('1', mobile=phone, datas=(message, 1))\n```\n\n```pycon\n# views.py\nimport random\nfrom django.shortcuts import render\nfrom django.http import JsonResponse, HttpResponse\nfrom django.views import View\nfrom django.core.cache import cache\nfrom .utils import send_message\n\nclass SmsView(View):\n    def get(self, request):\n        return render(request, 'index.html')\n\n    def post(self, request):\n        # 获取电话号码\n        mobile = request.POST.get('mobile')\n        # 生成随机码\n        code = random.randint(1000, 9999)\n        # 存储随机码 django_redis\n        # django 4.0 之后原生支持redis进行缓存,本版本使用的是3.2使用redis缓存的时候需要额外下载一个django-redis的包\n        # pip install django-redis\n        cache_key = f'sms_{mobile}'\n        # 检查是否已经有发过的且未过期的验证码\n        old_code = cache.get(cache_key)\n        if old_code:\n            return JsonResponse({\n                'status': 'error',\n                'message':'The sms_code is already existed'\n            })\n        # 将对应的验证码存储到缓存中\n        cache.set(cache_key, code, 60)\n        # 发送短信\n        send_message(mobile, code)\n        return JsonResponse({\n            'status': 'success'\n        })\n```\n\nredis缓存还可以使用以下方法调用\n\n```pycon\n#方式1 \n#cache.set/get (具备序列化和反序列化的功能，推荐使用此方法)\n#方式2\n#from django redis import get redis connection\n#r = get redis connection()\n#r.redis命令\n#方式3\ncache_page(60)\n```\n\n## Celery优化异步\n\n### 介绍\n\n以上的代码还存在一定的问题，如果容联云出现问题，`send_message(mobile, code)`会遭遇到堵塞，导致用户迟迟拿不到服务器返回的结果，影响用户的体验。\nCelery遵循生产者消费者模型，通过redis作为数据管道（任务调度器），Django作为数据生产者，Celery作为消费者。\n\n### 相关概念\n\nbroker - 消息传输的中间件，生产者一旦有消息发送，将发至broker; [RQ，redis]  \nbackend- 用于存储消息/任务结果，如果需要跟踪和查询任务状态，则需添加要配置相关  \nworker- 工作者- 消费/执行broker中消息/任务的进程\n\n### 整体架构图\n\n> ![img.png](../img_23_9_21/img.png)\n\n### 基本使用\n\n1. pip install celery  \n   在对应的项目环境下安装celery框架\n2. 创建worker\n\n```pycon\n# tasks.py\nfrom celery import  Celery\napp = Celery('test',broker='redis://:@127.0.0.1:6379/1')\n\n# 创建任函数\n@app.task\ndef task_test():\n    print('task is running')\n```\n\n3. 启动worker  \n   Ubuntu 终端中,tasks.py文件同级目录下 执行`celery -A tasks worker --loglevel=info`\n   此模式默认为前台启动，终端中会输出相关日志（注意，此时为前台启动）  \n   注意：Windows下`celery4.0`需要搭配插件使用，否则会产生错误，操作如下：\n    * pip install eventlet （安装此插件）\n    * celery -A <mymodule> worker -l info -P eventlet （启动添加 -P 参数）\n4. 消费者推送任务\n\n```pycon\nfrom  .tasks import task_test\n# 将任务推送到的redis任务队列中\ntask_test.delay()\n```\n\n执行完成之后注意观察`worker`日志。\n\n5. 输出成功\n\n```log\n[2023-09-21 22:13:25,002: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] received\n[2023-09-21 22:13:25,003: WARNING/MainProcess] task is running\n[2023-09-21 22:13:25,008: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] succeeded in 0.0s: None\n```\n\n### 存储异步的结果\n\nCelery提供存储任务执行结果的方案，需借助 redis 或 mysql 或 Memcached 等。celery允许我们将异步函数的值（函数返回值）存储到对应的存储介质中。\n示例代码如下：\n\n```pycon\n# tasks.py\nfrom celery import  Celery\napp = Celery('test',broker='redis://:@127.0.0.1:6379/1',backend='redis://:@127.0.0.1:6379/3')\n\n# 创建任函数\n@app.task\ndef task_test(a,b):\n    print('task is running')\n    return a + b\n```\n\n异步函数调用\n\n```pycon\nfrom task import task_test\n\ns = task_test.delay(10, 100)\n# 调用 result, celery会帮助我们自动去backend中（这里是redis）查询对应结果\nprint(s.result)\n```\n\n### 使用celery优化项目\n\n#### 步骤\n\n1. 创建celery配置文件\n    * 项目同名目录下创建 celery.py（跟settings.py文件平级）\n2. 应用下创建 tasks.py 集中定义对应 worker函数\n3. 视图函数充当生产者，推送具体worker函数\n4. 项目目录下启动worker\n    * celery -A 项目同名目录名 worker -linfo\n\n#### 修改代码\n\n1. 创建celery.py文件，编写对应的代码\n\n```pycon\n# celery.py\nfrom celery import Celery\nfrom django.conf import settings\nimport os\n\n#  将celery与django项目融合 Linux环境下使用\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'study_celery.settings')\n\napp = Celery('study_celery')\n# celery提供的更新配置项的方法\napp.conf.update(\n    BROKER_URL='redis://:@127.0.0.1:6379/1'\n)\n# 自动发现worker函数，也就是定义在app目录下tasks.py文件里面的函数\napp.autodiscover_tasks(settings.INSTALLED_APPS)\n# 启动\n# celery -A study_celery  worker -l info -P eventlet\n```\n\n2. 创建worker任务，在app目录下创建对应的文件\n\n```pycon\n#tasks.py\nfrom ronglian_sms_sdk import SmsSDK\nfrom study_celery.celery import app\n\n@app.task\ndef send_message(phone, message):\n    sdk = SmsSDK('xxxxx', 'xxxxx',\n                 'xxxxx')\n    sdk.sendMessage('1', mobile=phone, datas=(message, 1))\n```\n\n3. 修改视图函数\n\n```pycon\nfrom .tasks import send_message\n...\n  send_message.delay(mobile, code)\n...\n```\n\n4. 正式环境启动（Linux）  \n   命令：nohup celery -A proj worker -P gevent -c 1000 > celery.log\n   2>&1&\n\n    * nohup:忽略所有挂断 (SIGHUP) 信号\n    * 标准输入是文件描述符0。它是命令的输入，缺省是键盘，也可以是文件或其他命令的输出。\n    * 标准输出是文件描述符1。它是命令的输出，缺省是屏幕，也可以是文件。\n    * 标准错误是文件描述符2。这是命令错误的输出，缺省是屏幕，同样也可以是文件。\n    * 3，&符号: 代表将命令在后台执行\n","source":"_posts/Django学习笔记四.md","raw":"---\ntitle: Django学习笔记（四）\ndate: 2023-09-21 23:09:26\ntags: Django\n---\n# Celery结合Django\n\n## 验证码功能的实现\n\n1. 注册容联云,获取对应`AUTH＿TOKEN`,查看接入文档\n\n```pycon\n对应接入指南：https://doc.yuntongxun.com/p/5a531a353b8496dd00dcdfe2\n```\n\n2. 使用容联通云sdk\n\n```pycon\n# pip install pip install ronglian_sms_sdk\n# 初始化SDK\nsdk = SmsSDK(accId, accToken, appId)\n#  调用发送短信方法,data为元组,是需要传递到短信模板中的数据\nsdk.sendMessage(tid, mobile, datas)\n```\n\n3. 验证码功能的流程  \n   发送Ajax请求到后端1，前端页面 点击“免费获取验证码\"后端接到请求后  \n   1,生成随机验证码  \n   2,存储验证码  \n   3,发送验证码  \n   注册时，需要提交验证码，并在注册逻辑中对比验证码是否正确。\n4. 完成前端代码:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>发送短信</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js\"></script>\n</head>\n\n<body>\n<div class=\"modal-body\">\n    <form class=\"container\" id=\"loginform\">\n        <div class=\"form-group row\">\n            <div class=\"col-sm-1\"></div>\n            <label class=\"col-sm-3 col-form-label\">短信验证</label>\n            <div class=\"col-sm-7\">\n                <div class=\"input-group input-group-sm\">\n                    <input type=\"text\" class=\"form-control\" id=\"captcha\" name=\"captcha\">\n                    <span class=\"input-group-append\">\n                                        <button type=\"button\" class=\"btn btn-info btn-flat\" id=\"captchabtn\"\n                                                onclick=\"sendcaptcha()\">发送验证码</button>\n                                    </span>\n                </div>\n            </div>\n        </div>\n    </form>\n    <!-- /.card-body -->\n</div>\n<div class=\"modal-footer justify-content-between\">\n    <div id=\"loginerror\" class=\"text-danger\"></div>\n    <button type=\"button\" class=\"btn btn-info\" onclick=\"login()\">注册账号</button>\n</div>\n\n<script>\n    /* 倒计时效果函数 */\n    function SmsTimer() {\n        // 将标签设置为不可点击的\n        // jquery 的变量一般以 $ 开头\n        var $btnEle = $('#captchabtn');\n        $btnEle.attr(\"disabled\",true);\n        // 设置定时器读秒效果和标签文本内容的修改\n        var timer = 60;\n        var t = setInterval(\n            function () {\n                $btnEle.text(`${timer}秒后重新发送`);\n                timer--;\n                // 如果小于0就将定时器清除并且将$btnEle设置为可操作\n                if (timer <= 0) {\n                    clearInterval(t);\n                    $btnEle.text('发送验证码');\n                    $btnEle.attr('disabled', false);\n                }\n            },\n            1000 // 1秒中执行一次这个函数\n        )\n    }\n    /* 发送手机短信验证码 */\n    function sendcaptcha() {\n        var mobile = $('#captcha').val();\n        console.log(mobile)\n        var mobilereg = /^(0|86|17951)?(13[0-9]|15[012356789]|17[0-8]|18[0-9]|14[5679]|19[189]|16[56])[0-9]{8}$/;\n        if (mobile.length == 11 &&  mobilereg.test(mobile)) {\n            $.ajax({\n                url: '{% url 'front:index' %}',\n                type:'post',\n                data: {\n                    'mobile': mobile,\n                },\n                success: function (data) {\n                    if (data['status'] === 'success'){\n                        SmsTimer()\n                    }else {\n                        alert('未成')\n                    }\n                }\n            })\n        }else {\n            alert('手机号码错误')\n        }\n    }\n</script>\n</body>\n</html>\n```\n\n5. 完成redis缓存的配置\n   使用redis作为缓存介质,存储短信验证码并且设置缓存的时间。\n\n```pycon\n# redis配置缓存\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://127.0.0.1:6379/1\",\n        \"OPTIONS\": {\n            \"CLIENT CLASS\": \"django_redis.client.DefaultClient\",\n            \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 100}\n        }\n    }\n}\n```\n\n6. 编写View视图功能代码\n\n```pycon\n# utils.py\nfrom ronglian_sms_sdk import SmsSDK\ndef send_message(phone, message):\n    sdk = SmsSDK('xxxxx', 'xxxxxx',\n                 'xxxxxx')\n    data = sdk.sendMessage('1', mobile=phone, datas=(message, 1))\n```\n\n```pycon\n# views.py\nimport random\nfrom django.shortcuts import render\nfrom django.http import JsonResponse, HttpResponse\nfrom django.views import View\nfrom django.core.cache import cache\nfrom .utils import send_message\n\nclass SmsView(View):\n    def get(self, request):\n        return render(request, 'index.html')\n\n    def post(self, request):\n        # 获取电话号码\n        mobile = request.POST.get('mobile')\n        # 生成随机码\n        code = random.randint(1000, 9999)\n        # 存储随机码 django_redis\n        # django 4.0 之后原生支持redis进行缓存,本版本使用的是3.2使用redis缓存的时候需要额外下载一个django-redis的包\n        # pip install django-redis\n        cache_key = f'sms_{mobile}'\n        # 检查是否已经有发过的且未过期的验证码\n        old_code = cache.get(cache_key)\n        if old_code:\n            return JsonResponse({\n                'status': 'error',\n                'message':'The sms_code is already existed'\n            })\n        # 将对应的验证码存储到缓存中\n        cache.set(cache_key, code, 60)\n        # 发送短信\n        send_message(mobile, code)\n        return JsonResponse({\n            'status': 'success'\n        })\n```\n\nredis缓存还可以使用以下方法调用\n\n```pycon\n#方式1 \n#cache.set/get (具备序列化和反序列化的功能，推荐使用此方法)\n#方式2\n#from django redis import get redis connection\n#r = get redis connection()\n#r.redis命令\n#方式3\ncache_page(60)\n```\n\n## Celery优化异步\n\n### 介绍\n\n以上的代码还存在一定的问题，如果容联云出现问题，`send_message(mobile, code)`会遭遇到堵塞，导致用户迟迟拿不到服务器返回的结果，影响用户的体验。\nCelery遵循生产者消费者模型，通过redis作为数据管道（任务调度器），Django作为数据生产者，Celery作为消费者。\n\n### 相关概念\n\nbroker - 消息传输的中间件，生产者一旦有消息发送，将发至broker; [RQ，redis]  \nbackend- 用于存储消息/任务结果，如果需要跟踪和查询任务状态，则需添加要配置相关  \nworker- 工作者- 消费/执行broker中消息/任务的进程\n\n### 整体架构图\n\n> ![img.png](../img_23_9_21/img.png)\n\n### 基本使用\n\n1. pip install celery  \n   在对应的项目环境下安装celery框架\n2. 创建worker\n\n```pycon\n# tasks.py\nfrom celery import  Celery\napp = Celery('test',broker='redis://:@127.0.0.1:6379/1')\n\n# 创建任函数\n@app.task\ndef task_test():\n    print('task is running')\n```\n\n3. 启动worker  \n   Ubuntu 终端中,tasks.py文件同级目录下 执行`celery -A tasks worker --loglevel=info`\n   此模式默认为前台启动，终端中会输出相关日志（注意，此时为前台启动）  \n   注意：Windows下`celery4.0`需要搭配插件使用，否则会产生错误，操作如下：\n    * pip install eventlet （安装此插件）\n    * celery -A <mymodule> worker -l info -P eventlet （启动添加 -P 参数）\n4. 消费者推送任务\n\n```pycon\nfrom  .tasks import task_test\n# 将任务推送到的redis任务队列中\ntask_test.delay()\n```\n\n执行完成之后注意观察`worker`日志。\n\n5. 输出成功\n\n```log\n[2023-09-21 22:13:25,002: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] received\n[2023-09-21 22:13:25,003: WARNING/MainProcess] task is running\n[2023-09-21 22:13:25,008: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] succeeded in 0.0s: None\n```\n\n### 存储异步的结果\n\nCelery提供存储任务执行结果的方案，需借助 redis 或 mysql 或 Memcached 等。celery允许我们将异步函数的值（函数返回值）存储到对应的存储介质中。\n示例代码如下：\n\n```pycon\n# tasks.py\nfrom celery import  Celery\napp = Celery('test',broker='redis://:@127.0.0.1:6379/1',backend='redis://:@127.0.0.1:6379/3')\n\n# 创建任函数\n@app.task\ndef task_test(a,b):\n    print('task is running')\n    return a + b\n```\n\n异步函数调用\n\n```pycon\nfrom task import task_test\n\ns = task_test.delay(10, 100)\n# 调用 result, celery会帮助我们自动去backend中（这里是redis）查询对应结果\nprint(s.result)\n```\n\n### 使用celery优化项目\n\n#### 步骤\n\n1. 创建celery配置文件\n    * 项目同名目录下创建 celery.py（跟settings.py文件平级）\n2. 应用下创建 tasks.py 集中定义对应 worker函数\n3. 视图函数充当生产者，推送具体worker函数\n4. 项目目录下启动worker\n    * celery -A 项目同名目录名 worker -linfo\n\n#### 修改代码\n\n1. 创建celery.py文件，编写对应的代码\n\n```pycon\n# celery.py\nfrom celery import Celery\nfrom django.conf import settings\nimport os\n\n#  将celery与django项目融合 Linux环境下使用\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'study_celery.settings')\n\napp = Celery('study_celery')\n# celery提供的更新配置项的方法\napp.conf.update(\n    BROKER_URL='redis://:@127.0.0.1:6379/1'\n)\n# 自动发现worker函数，也就是定义在app目录下tasks.py文件里面的函数\napp.autodiscover_tasks(settings.INSTALLED_APPS)\n# 启动\n# celery -A study_celery  worker -l info -P eventlet\n```\n\n2. 创建worker任务，在app目录下创建对应的文件\n\n```pycon\n#tasks.py\nfrom ronglian_sms_sdk import SmsSDK\nfrom study_celery.celery import app\n\n@app.task\ndef send_message(phone, message):\n    sdk = SmsSDK('xxxxx', 'xxxxx',\n                 'xxxxx')\n    sdk.sendMessage('1', mobile=phone, datas=(message, 1))\n```\n\n3. 修改视图函数\n\n```pycon\nfrom .tasks import send_message\n...\n  send_message.delay(mobile, code)\n...\n```\n\n4. 正式环境启动（Linux）  \n   命令：nohup celery -A proj worker -P gevent -c 1000 > celery.log\n   2>&1&\n\n    * nohup:忽略所有挂断 (SIGHUP) 信号\n    * 标准输入是文件描述符0。它是命令的输入，缺省是键盘，也可以是文件或其他命令的输出。\n    * 标准输出是文件描述符1。它是命令的输出，缺省是屏幕，也可以是文件。\n    * 标准错误是文件描述符2。这是命令错误的输出，缺省是屏幕，同样也可以是文件。\n    * 3，&符号: 代表将命令在后台执行\n","slug":"Django学习笔记四","published":1,"updated":"2023-09-21T15:12:21.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9kv00045otx664xdtpk","content":"<h1 id=\"Celery结合Django\"><a href=\"#Celery结合Django\" class=\"headerlink\" title=\"Celery结合Django\"></a>Celery结合Django</h1><h2 id=\"验证码功能的实现\"><a href=\"#验证码功能的实现\" class=\"headerlink\" title=\"验证码功能的实现\"></a>验证码功能的实现</h2><ol>\n<li>注册容联云,获取对应<code>AUTH＿TOKEN</code>,查看接入文档</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应接入指南：https://doc.yuntongxun.com/p/5a531a353b8496dd00dcdfe2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用容联通云sdk</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pip install pip install ronglian_sms_sdk</span><br><span class=\"line\"># 初始化SDK</span><br><span class=\"line\">sdk = SmsSDK(accId, accToken, appId)</span><br><span class=\"line\">#  调用发送短信方法,data为元组,是需要传递到短信模板中的数据</span><br><span class=\"line\">sdk.sendMessage(tid, mobile, datas)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证码功能的流程<br>发送Ajax请求到后端1，前端页面 点击“免费获取验证码”后端接到请求后<br>1,生成随机验证码<br>2,存储验证码<br>3,发送验证码<br>注册时，需要提交验证码，并在注册逻辑中对比验证码是否正确。</li>\n<li>完成前端代码:</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>发送短信<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-body&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginform&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-3 col-form-label&quot;</span>&gt;</span>短信验证<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group input-group-sm&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;captcha&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;captcha&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-append&quot;</span>&gt;</span></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info btn-flat&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;captchabtn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                                                <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendcaptcha()&quot;</span>&gt;</span>发送验证码<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /.card-body --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-footer justify-content-between&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginerror&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-danger&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;login()&quot;</span>&gt;</span>注册账号<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/* 倒计时效果函数 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">SmsTimer</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 将标签设置为不可点击的</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// jquery 的变量一般以 $ 开头</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> $btnEle = $(<span class=\"string\">&#x27;#captchabtn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $btnEle.<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;disabled&quot;</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 设置定时器读秒效果和标签文本内容的修改</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> timer = <span class=\"number\">60</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> t = <span class=\"built_in\">setInterval</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                $btnEle.<span class=\"title function_\">text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;timer&#125;</span>秒后重新发送`</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                timer--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 如果小于0就将定时器清除并且将$btnEle设置为可操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (timer &lt;= <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"built_in\">clearInterval</span>(t);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    $btnEle.<span class=\"title function_\">text</span>(<span class=\"string\">&#x27;发送验证码&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    $btnEle.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;disabled&#x27;</span>, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"number\">1000</span> <span class=\"comment\">// 1秒中执行一次这个函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        )</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/* 发送手机短信验证码 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sendcaptcha</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> mobile = $(<span class=\"string\">&#x27;#captcha&#x27;</span>).<span class=\"title function_\">val</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mobile)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> mobilereg = <span class=\"regexp\">/^(0|86|17951)?(13[0-9]|15[012356789]|17[0-8]|18[0-9]|14[5679]|19[189]|16[56])[0-9]&#123;8&#125;$/</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (mobile.<span class=\"property\">length</span> == <span class=\"number\">11</span> &amp;&amp;  mobilereg.<span class=\"title function_\">test</span>(mobile)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">url</span>: <span class=\"string\">&#x27;&#123;% url &#x27;</span><span class=\"attr\">front</span>:index<span class=\"string\">&#x27; %&#125;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;mobile&#x27;</span>: mobile,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (data[<span class=\"string\">&#x27;status&#x27;</span>] === <span class=\"string\">&#x27;success&#x27;</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title class_\">SmsTimer</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;<span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未成&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;手机号码错误&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>完成redis缓存的配置<br>使用redis作为缓存介质,存储短信验证码并且设置缓存的时间。</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis配置缓存</span><br><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,</span><br><span class=\"line\">        &quot;OPTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;CLIENT CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class=\"line\">            &quot;CONNECTION_POOL_KWARGS&quot;: &#123;&quot;max_connections&quot;: 100&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>编写View视图功能代码</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># utils.py</span><br><span class=\"line\">from ronglian_sms_sdk import SmsSDK</span><br><span class=\"line\">def send_message(phone, message):</span><br><span class=\"line\">    sdk = SmsSDK(&#x27;xxxxx&#x27;, &#x27;xxxxxx&#x27;,</span><br><span class=\"line\">                 &#x27;xxxxxx&#x27;)</span><br><span class=\"line\">    data = sdk.sendMessage(&#x27;1&#x27;, mobile=phone, datas=(message, 1))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># views.py</span><br><span class=\"line\">import random</span><br><span class=\"line\">from django.shortcuts import render</span><br><span class=\"line\">from django.http import JsonResponse, HttpResponse</span><br><span class=\"line\">from django.views import View</span><br><span class=\"line\">from django.core.cache import cache</span><br><span class=\"line\">from .utils import send_message</span><br><span class=\"line\"></span><br><span class=\"line\">class SmsView(View):</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        return render(request, &#x27;index.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        # 获取电话号码</span><br><span class=\"line\">        mobile = request.POST.get(&#x27;mobile&#x27;)</span><br><span class=\"line\">        # 生成随机码</span><br><span class=\"line\">        code = random.randint(1000, 9999)</span><br><span class=\"line\">        # 存储随机码 django_redis</span><br><span class=\"line\">        # django 4.0 之后原生支持redis进行缓存,本版本使用的是3.2使用redis缓存的时候需要额外下载一个django-redis的包</span><br><span class=\"line\">        # pip install django-redis</span><br><span class=\"line\">        cache_key = f&#x27;sms_&#123;mobile&#125;&#x27;</span><br><span class=\"line\">        # 检查是否已经有发过的且未过期的验证码</span><br><span class=\"line\">        old_code = cache.get(cache_key)</span><br><span class=\"line\">        if old_code:</span><br><span class=\"line\">            return JsonResponse(&#123;</span><br><span class=\"line\">                &#x27;status&#x27;: &#x27;error&#x27;,</span><br><span class=\"line\">                &#x27;message&#x27;:&#x27;The sms_code is already existed&#x27;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        # 将对应的验证码存储到缓存中</span><br><span class=\"line\">        cache.set(cache_key, code, 60)</span><br><span class=\"line\">        # 发送短信</span><br><span class=\"line\">        send_message(mobile, code)</span><br><span class=\"line\">        return JsonResponse(&#123;</span><br><span class=\"line\">            &#x27;status&#x27;: &#x27;success&#x27;</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>redis缓存还可以使用以下方法调用</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式1 </span><br><span class=\"line\">#cache.set/get (具备序列化和反序列化的功能，推荐使用此方法)</span><br><span class=\"line\">#方式2</span><br><span class=\"line\">#from django redis import get redis connection</span><br><span class=\"line\">#r = get redis connection()</span><br><span class=\"line\">#r.redis命令</span><br><span class=\"line\">#方式3</span><br><span class=\"line\">cache_page(60)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Celery优化异步\"><a href=\"#Celery优化异步\" class=\"headerlink\" title=\"Celery优化异步\"></a>Celery优化异步</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>以上的代码还存在一定的问题，如果容联云出现问题，<code>send_message(mobile, code)</code>会遭遇到堵塞，导致用户迟迟拿不到服务器返回的结果，影响用户的体验。<br>Celery遵循生产者消费者模型，通过redis作为数据管道（任务调度器），Django作为数据生产者，Celery作为消费者。</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><p>broker - 消息传输的中间件，生产者一旦有消息发送，将发至broker; [RQ，redis]<br>backend- 用于存储消息&#x2F;任务结果，如果需要跟踪和查询任务状态，则需添加要配置相关<br>worker- 工作者- 消费&#x2F;执行broker中消息&#x2F;任务的进程</p>\n<h3 id=\"整体架构图\"><a href=\"#整体架构图\" class=\"headerlink\" title=\"整体架构图\"></a>整体架构图</h3><blockquote>\n<p><img src=\"/../img_23_9_21/img.png\" alt=\"img.png\"></p>\n</blockquote>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ol>\n<li>pip install celery<br>在对应的项目环境下安装celery框架</li>\n<li>创建worker</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tasks.py</span><br><span class=\"line\">from celery import  Celery</span><br><span class=\"line\">app = Celery(&#x27;test&#x27;,broker=&#x27;redis://:@127.0.0.1:6379/1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建任函数</span><br><span class=\"line\">@app.task</span><br><span class=\"line\">def task_test():</span><br><span class=\"line\">    print(&#x27;task is running&#x27;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动worker<br>Ubuntu 终端中,tasks.py文件同级目录下 执行<code>celery -A tasks worker --loglevel=info</code><br>此模式默认为前台启动，终端中会输出相关日志（注意，此时为前台启动）<br>注意：Windows下<code>celery4.0</code>需要搭配插件使用，否则会产生错误，操作如下：<ul>\n<li>pip install eventlet （安装此插件）</li>\n<li>celery -A <mymodule> worker -l info -P eventlet （启动添加 -P 参数）</li>\n</ul>\n</li>\n<li>消费者推送任务</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from  .tasks import task_test</span><br><span class=\"line\"># 将任务推送到的redis任务队列中</span><br><span class=\"line\">task_test.delay()</span><br></pre></td></tr></table></figure>\n\n<p>执行完成之后注意观察<code>worker</code>日志。</p>\n<ol start=\"5\">\n<li>输出成功</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2023-09-21 22:13:25,002: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] received</span><br><span class=\"line\">[2023-09-21 22:13:25,003: WARNING/MainProcess] task is running</span><br><span class=\"line\">[2023-09-21 22:13:25,008: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] succeeded in 0.0s: None</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储异步的结果\"><a href=\"#存储异步的结果\" class=\"headerlink\" title=\"存储异步的结果\"></a>存储异步的结果</h3><p>Celery提供存储任务执行结果的方案，需借助 redis 或 mysql 或 Memcached 等。celery允许我们将异步函数的值（函数返回值）存储到对应的存储介质中。<br>示例代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tasks.py</span><br><span class=\"line\">from celery import  Celery</span><br><span class=\"line\">app = Celery(&#x27;test&#x27;,broker=&#x27;redis://:@127.0.0.1:6379/1&#x27;,backend=&#x27;redis://:@127.0.0.1:6379/3&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建任函数</span><br><span class=\"line\">@app.task</span><br><span class=\"line\">def task_test(a,b):</span><br><span class=\"line\">    print(&#x27;task is running&#x27;)</span><br><span class=\"line\">    return a + b</span><br></pre></td></tr></table></figure>\n\n<p>异步函数调用</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from task import task_test</span><br><span class=\"line\"></span><br><span class=\"line\">s = task_test.delay(10, 100)</span><br><span class=\"line\"># 调用 result, celery会帮助我们自动去backend中（这里是redis）查询对应结果</span><br><span class=\"line\">print(s.result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用celery优化项目\"><a href=\"#使用celery优化项目\" class=\"headerlink\" title=\"使用celery优化项目\"></a>使用celery优化项目</h3><h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ol>\n<li>创建celery配置文件<ul>\n<li>项目同名目录下创建 celery.py（跟settings.py文件平级）</li>\n</ul>\n</li>\n<li>应用下创建 tasks.py 集中定义对应 worker函数</li>\n<li>视图函数充当生产者，推送具体worker函数</li>\n<li>项目目录下启动worker<ul>\n<li>celery -A 项目同名目录名 worker -linfo</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h4><ol>\n<li>创建celery.py文件，编写对应的代码</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># celery.py</span><br><span class=\"line\">from celery import Celery</span><br><span class=\"line\">from django.conf import settings</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">#  将celery与django项目融合 Linux环境下使用</span><br><span class=\"line\">os.environ.setdefault(&#x27;DJANGO_SETTINGS_MODULE&#x27;, &#x27;study_celery.settings&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&#x27;study_celery&#x27;)</span><br><span class=\"line\"># celery提供的更新配置项的方法</span><br><span class=\"line\">app.conf.update(</span><br><span class=\"line\">    BROKER_URL=&#x27;redis://:@127.0.0.1:6379/1&#x27;</span><br><span class=\"line\">)</span><br><span class=\"line\"># 自动发现worker函数，也就是定义在app目录下tasks.py文件里面的函数</span><br><span class=\"line\">app.autodiscover_tasks(settings.INSTALLED_APPS)</span><br><span class=\"line\"># 启动</span><br><span class=\"line\"># celery -A study_celery  worker -l info -P eventlet</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建worker任务，在app目录下创建对应的文件</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#tasks.py</span><br><span class=\"line\">from ronglian_sms_sdk import SmsSDK</span><br><span class=\"line\">from study_celery.celery import app</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task</span><br><span class=\"line\">def send_message(phone, message):</span><br><span class=\"line\">    sdk = SmsSDK(&#x27;xxxxx&#x27;, &#x27;xxxxx&#x27;,</span><br><span class=\"line\">                 &#x27;xxxxx&#x27;)</span><br><span class=\"line\">    sdk.sendMessage(&#x27;1&#x27;, mobile=phone, datas=(message, 1))</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改视图函数</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from .tasks import send_message</span><br><span class=\"line\"><span class=\"meta prompt_\">...</span></span><br><span class=\"line\">  send_message.delay(mobile, code)</span><br><span class=\"line\"><span class=\"meta prompt_\">...</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>正式环境启动（Linux）<br>命令：nohup celery -A proj worker -P gevent -c 1000 &gt; celery.log<br>2&gt;&amp;1&amp;</p>\n<ul>\n<li>nohup:忽略所有挂断 (SIGHUP) 信号</li>\n<li>标准输入是文件描述符0。它是命令的输入，缺省是键盘，也可以是文件或其他命令的输出。</li>\n<li>标准输出是文件描述符1。它是命令的输出，缺省是屏幕，也可以是文件。</li>\n<li>标准错误是文件描述符2。这是命令错误的输出，缺省是屏幕，同样也可以是文件。</li>\n<li>3，&amp;符号: 代表将命令在后台执行</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Celery结合Django\"><a href=\"#Celery结合Django\" class=\"headerlink\" title=\"Celery结合Django\"></a>Celery结合Django</h1><h2 id=\"验证码功能的实现\"><a href=\"#验证码功能的实现\" class=\"headerlink\" title=\"验证码功能的实现\"></a>验证码功能的实现</h2><ol>\n<li>注册容联云,获取对应<code>AUTH＿TOKEN</code>,查看接入文档</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应接入指南：https://doc.yuntongxun.com/p/5a531a353b8496dd00dcdfe2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用容联通云sdk</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pip install pip install ronglian_sms_sdk</span><br><span class=\"line\"># 初始化SDK</span><br><span class=\"line\">sdk = SmsSDK(accId, accToken, appId)</span><br><span class=\"line\">#  调用发送短信方法,data为元组,是需要传递到短信模板中的数据</span><br><span class=\"line\">sdk.sendMessage(tid, mobile, datas)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>验证码功能的流程<br>发送Ajax请求到后端1，前端页面 点击“免费获取验证码”后端接到请求后<br>1,生成随机验证码<br>2,存储验证码<br>3,发送验证码<br>注册时，需要提交验证码，并在注册逻辑中对比验证码是否正确。</li>\n<li>完成前端代码:</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>发送短信<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-body&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginform&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group row&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-3 col-form-label&quot;</span>&gt;</span>短信验证<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-7&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group input-group-sm&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;captcha&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;captcha&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;input-group-append&quot;</span>&gt;</span></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info btn-flat&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;captchabtn&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                                                <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendcaptcha()&quot;</span>&gt;</span>发送验证码<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /.card-body --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;modal-footer justify-content-between&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginerror&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-danger&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;login()&quot;</span>&gt;</span>注册账号<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/* 倒计时效果函数 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">SmsTimer</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 将标签设置为不可点击的</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// jquery 的变量一般以 $ 开头</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> $btnEle = $(<span class=\"string\">&#x27;#captchabtn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $btnEle.<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;disabled&quot;</span>,<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 设置定时器读秒效果和标签文本内容的修改</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> timer = <span class=\"number\">60</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> t = <span class=\"built_in\">setInterval</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                $btnEle.<span class=\"title function_\">text</span>(<span class=\"string\">`<span class=\"subst\">$&#123;timer&#125;</span>秒后重新发送`</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                timer--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 如果小于0就将定时器清除并且将$btnEle设置为可操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (timer &lt;= <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"built_in\">clearInterval</span>(t);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    $btnEle.<span class=\"title function_\">text</span>(<span class=\"string\">&#x27;发送验证码&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    $btnEle.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;disabled&#x27;</span>, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"number\">1000</span> <span class=\"comment\">// 1秒中执行一次这个函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        )</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/* 发送手机短信验证码 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sendcaptcha</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> mobile = $(<span class=\"string\">&#x27;#captcha&#x27;</span>).<span class=\"title function_\">val</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(mobile)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> mobilereg = <span class=\"regexp\">/^(0|86|17951)?(13[0-9]|15[012356789]|17[0-8]|18[0-9]|14[5679]|19[189]|16[56])[0-9]&#123;8&#125;$/</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (mobile.<span class=\"property\">length</span> == <span class=\"number\">11</span> &amp;&amp;  mobilereg.<span class=\"title function_\">test</span>(mobile)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">url</span>: <span class=\"string\">&#x27;&#123;% url &#x27;</span><span class=\"attr\">front</span>:index<span class=\"string\">&#x27; %&#125;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"string\">&#x27;mobile&#x27;</span>: mobile,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (data[<span class=\"string\">&#x27;status&#x27;</span>] === <span class=\"string\">&#x27;success&#x27;</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title class_\">SmsTimer</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;<span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未成&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;<span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;手机号码错误&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>完成redis缓存的配置<br>使用redis作为缓存介质,存储短信验证码并且设置缓存的时间。</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis配置缓存</span><br><span class=\"line\">CACHES = &#123;</span><br><span class=\"line\">    &quot;default&quot;: &#123;</span><br><span class=\"line\">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class=\"line\">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,</span><br><span class=\"line\">        &quot;OPTIONS&quot;: &#123;</span><br><span class=\"line\">            &quot;CLIENT CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class=\"line\">            &quot;CONNECTION_POOL_KWARGS&quot;: &#123;&quot;max_connections&quot;: 100&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>编写View视图功能代码</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># utils.py</span><br><span class=\"line\">from ronglian_sms_sdk import SmsSDK</span><br><span class=\"line\">def send_message(phone, message):</span><br><span class=\"line\">    sdk = SmsSDK(&#x27;xxxxx&#x27;, &#x27;xxxxxx&#x27;,</span><br><span class=\"line\">                 &#x27;xxxxxx&#x27;)</span><br><span class=\"line\">    data = sdk.sendMessage(&#x27;1&#x27;, mobile=phone, datas=(message, 1))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># views.py</span><br><span class=\"line\">import random</span><br><span class=\"line\">from django.shortcuts import render</span><br><span class=\"line\">from django.http import JsonResponse, HttpResponse</span><br><span class=\"line\">from django.views import View</span><br><span class=\"line\">from django.core.cache import cache</span><br><span class=\"line\">from .utils import send_message</span><br><span class=\"line\"></span><br><span class=\"line\">class SmsView(View):</span><br><span class=\"line\">    def get(self, request):</span><br><span class=\"line\">        return render(request, &#x27;index.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def post(self, request):</span><br><span class=\"line\">        # 获取电话号码</span><br><span class=\"line\">        mobile = request.POST.get(&#x27;mobile&#x27;)</span><br><span class=\"line\">        # 生成随机码</span><br><span class=\"line\">        code = random.randint(1000, 9999)</span><br><span class=\"line\">        # 存储随机码 django_redis</span><br><span class=\"line\">        # django 4.0 之后原生支持redis进行缓存,本版本使用的是3.2使用redis缓存的时候需要额外下载一个django-redis的包</span><br><span class=\"line\">        # pip install django-redis</span><br><span class=\"line\">        cache_key = f&#x27;sms_&#123;mobile&#125;&#x27;</span><br><span class=\"line\">        # 检查是否已经有发过的且未过期的验证码</span><br><span class=\"line\">        old_code = cache.get(cache_key)</span><br><span class=\"line\">        if old_code:</span><br><span class=\"line\">            return JsonResponse(&#123;</span><br><span class=\"line\">                &#x27;status&#x27;: &#x27;error&#x27;,</span><br><span class=\"line\">                &#x27;message&#x27;:&#x27;The sms_code is already existed&#x27;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        # 将对应的验证码存储到缓存中</span><br><span class=\"line\">        cache.set(cache_key, code, 60)</span><br><span class=\"line\">        # 发送短信</span><br><span class=\"line\">        send_message(mobile, code)</span><br><span class=\"line\">        return JsonResponse(&#123;</span><br><span class=\"line\">            &#x27;status&#x27;: &#x27;success&#x27;</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>redis缓存还可以使用以下方法调用</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#方式1 </span><br><span class=\"line\">#cache.set/get (具备序列化和反序列化的功能，推荐使用此方法)</span><br><span class=\"line\">#方式2</span><br><span class=\"line\">#from django redis import get redis connection</span><br><span class=\"line\">#r = get redis connection()</span><br><span class=\"line\">#r.redis命令</span><br><span class=\"line\">#方式3</span><br><span class=\"line\">cache_page(60)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Celery优化异步\"><a href=\"#Celery优化异步\" class=\"headerlink\" title=\"Celery优化异步\"></a>Celery优化异步</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>以上的代码还存在一定的问题，如果容联云出现问题，<code>send_message(mobile, code)</code>会遭遇到堵塞，导致用户迟迟拿不到服务器返回的结果，影响用户的体验。<br>Celery遵循生产者消费者模型，通过redis作为数据管道（任务调度器），Django作为数据生产者，Celery作为消费者。</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><p>broker - 消息传输的中间件，生产者一旦有消息发送，将发至broker; [RQ，redis]<br>backend- 用于存储消息&#x2F;任务结果，如果需要跟踪和查询任务状态，则需添加要配置相关<br>worker- 工作者- 消费&#x2F;执行broker中消息&#x2F;任务的进程</p>\n<h3 id=\"整体架构图\"><a href=\"#整体架构图\" class=\"headerlink\" title=\"整体架构图\"></a>整体架构图</h3><blockquote>\n<p><img src=\"/../img_23_9_21/img.png\" alt=\"img.png\"></p>\n</blockquote>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ol>\n<li>pip install celery<br>在对应的项目环境下安装celery框架</li>\n<li>创建worker</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tasks.py</span><br><span class=\"line\">from celery import  Celery</span><br><span class=\"line\">app = Celery(&#x27;test&#x27;,broker=&#x27;redis://:@127.0.0.1:6379/1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建任函数</span><br><span class=\"line\">@app.task</span><br><span class=\"line\">def task_test():</span><br><span class=\"line\">    print(&#x27;task is running&#x27;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动worker<br>Ubuntu 终端中,tasks.py文件同级目录下 执行<code>celery -A tasks worker --loglevel=info</code><br>此模式默认为前台启动，终端中会输出相关日志（注意，此时为前台启动）<br>注意：Windows下<code>celery4.0</code>需要搭配插件使用，否则会产生错误，操作如下：<ul>\n<li>pip install eventlet （安装此插件）</li>\n<li>celery -A <mymodule> worker -l info -P eventlet （启动添加 -P 参数）</li>\n</ul>\n</li>\n<li>消费者推送任务</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from  .tasks import task_test</span><br><span class=\"line\"># 将任务推送到的redis任务队列中</span><br><span class=\"line\">task_test.delay()</span><br></pre></td></tr></table></figure>\n\n<p>执行完成之后注意观察<code>worker</code>日志。</p>\n<ol start=\"5\">\n<li>输出成功</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2023-09-21 22:13:25,002: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] received</span><br><span class=\"line\">[2023-09-21 22:13:25,003: WARNING/MainProcess] task is running</span><br><span class=\"line\">[2023-09-21 22:13:25,008: INFO/MainProcess] Task task.task_test[75448350-1bda-4611-9ad9-75729ea01f7a] succeeded in 0.0s: None</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储异步的结果\"><a href=\"#存储异步的结果\" class=\"headerlink\" title=\"存储异步的结果\"></a>存储异步的结果</h3><p>Celery提供存储任务执行结果的方案，需借助 redis 或 mysql 或 Memcached 等。celery允许我们将异步函数的值（函数返回值）存储到对应的存储介质中。<br>示例代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tasks.py</span><br><span class=\"line\">from celery import  Celery</span><br><span class=\"line\">app = Celery(&#x27;test&#x27;,broker=&#x27;redis://:@127.0.0.1:6379/1&#x27;,backend=&#x27;redis://:@127.0.0.1:6379/3&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建任函数</span><br><span class=\"line\">@app.task</span><br><span class=\"line\">def task_test(a,b):</span><br><span class=\"line\">    print(&#x27;task is running&#x27;)</span><br><span class=\"line\">    return a + b</span><br></pre></td></tr></table></figure>\n\n<p>异步函数调用</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from task import task_test</span><br><span class=\"line\"></span><br><span class=\"line\">s = task_test.delay(10, 100)</span><br><span class=\"line\"># 调用 result, celery会帮助我们自动去backend中（这里是redis）查询对应结果</span><br><span class=\"line\">print(s.result)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用celery优化项目\"><a href=\"#使用celery优化项目\" class=\"headerlink\" title=\"使用celery优化项目\"></a>使用celery优化项目</h3><h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ol>\n<li>创建celery配置文件<ul>\n<li>项目同名目录下创建 celery.py（跟settings.py文件平级）</li>\n</ul>\n</li>\n<li>应用下创建 tasks.py 集中定义对应 worker函数</li>\n<li>视图函数充当生产者，推送具体worker函数</li>\n<li>项目目录下启动worker<ul>\n<li>celery -A 项目同名目录名 worker -linfo</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h4><ol>\n<li>创建celery.py文件，编写对应的代码</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># celery.py</span><br><span class=\"line\">from celery import Celery</span><br><span class=\"line\">from django.conf import settings</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">#  将celery与django项目融合 Linux环境下使用</span><br><span class=\"line\">os.environ.setdefault(&#x27;DJANGO_SETTINGS_MODULE&#x27;, &#x27;study_celery.settings&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Celery(&#x27;study_celery&#x27;)</span><br><span class=\"line\"># celery提供的更新配置项的方法</span><br><span class=\"line\">app.conf.update(</span><br><span class=\"line\">    BROKER_URL=&#x27;redis://:@127.0.0.1:6379/1&#x27;</span><br><span class=\"line\">)</span><br><span class=\"line\"># 自动发现worker函数，也就是定义在app目录下tasks.py文件里面的函数</span><br><span class=\"line\">app.autodiscover_tasks(settings.INSTALLED_APPS)</span><br><span class=\"line\"># 启动</span><br><span class=\"line\"># celery -A study_celery  worker -l info -P eventlet</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建worker任务，在app目录下创建对应的文件</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#tasks.py</span><br><span class=\"line\">from ronglian_sms_sdk import SmsSDK</span><br><span class=\"line\">from study_celery.celery import app</span><br><span class=\"line\"></span><br><span class=\"line\">@app.task</span><br><span class=\"line\">def send_message(phone, message):</span><br><span class=\"line\">    sdk = SmsSDK(&#x27;xxxxx&#x27;, &#x27;xxxxx&#x27;,</span><br><span class=\"line\">                 &#x27;xxxxx&#x27;)</span><br><span class=\"line\">    sdk.sendMessage(&#x27;1&#x27;, mobile=phone, datas=(message, 1))</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改视图函数</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from .tasks import send_message</span><br><span class=\"line\"><span class=\"meta prompt_\">...</span></span><br><span class=\"line\">  send_message.delay(mobile, code)</span><br><span class=\"line\"><span class=\"meta prompt_\">...</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>正式环境启动（Linux）<br>命令：nohup celery -A proj worker -P gevent -c 1000 &gt; celery.log<br>2&gt;&amp;1&amp;</p>\n<ul>\n<li>nohup:忽略所有挂断 (SIGHUP) 信号</li>\n<li>标准输入是文件描述符0。它是命令的输入，缺省是键盘，也可以是文件或其他命令的输出。</li>\n<li>标准输出是文件描述符1。它是命令的输出，缺省是屏幕，也可以是文件。</li>\n<li>标准错误是文件描述符2。这是命令错误的输出，缺省是屏幕，同样也可以是文件。</li>\n<li>3，&amp;符号: 代表将命令在后台执行</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Redis学习笔记（一）","date":"2023-09-19T15:02:02.000Z","_content":"# redis基础操作\n\n## 位图操作\n\n位图不是真正的数据,他是定义在字符串类型中。一个字符串的key最多存储512字节的内容，位上限：2^32。\n\n## 相关命令\n\n### setbit\n\n设置某位置上的二进制，语法如下：\n\n```redis\nsetbit key offset(偏移量) value(值)\n```\n\n效果如下：\n\n```\nset mykey ab\nget mykey  ->  ab\nsetbit mykey 6 1\nget mkey  -> cb\n```\n\n如果当前设置的位置不存在，那么redis会自动帮助我们扩展位置（默认补0）：\n\n```\nset mykey ab\nget mykey  ->  ab\nsetbit mykey 17 1\nget mkey  -> cb@\n```\n\n如果设置的key不存在，redis会自动帮我们创建这样一个key\n\n```\nsetbit hello 4 1\nget hello -> /b\n```\n\n### getbit\n\n获取某一个位置上的值：\n\n```\ngetbit key offset\n```\n\n### bitcount\n\n统计键中对应的值有多少个1：\n\n```\nbitcount key start end (start/end代表索引`字节`)\n```\n\n效果如下：\n\n```\nset mykey ab\nget mykey -> ab\nbitcount mykey 0 0 -> 3\n```\n\n## python操作位图\n\n```python\nimport redis\nr = redis.Redis(host='xxxx',port='6379',db=0)\nr.setbit('mykey',4,1)\nprint(r.getbit('mykey',3))\n```\n\n## 主从复制\n\n它通常是指，通高可用 - 是系统架构设计中必须考虑的因素之一，过设计减少系统不能提供服务的时间目标:消除基础架构中的单点故障redis单进程单线程模式，如果redis进程挂掉，相关依赖的服务就难以正常服务。  \n\nredis高可用方案-主从搭建 +哨兵  \n\n1、一个Redis服务可以有多个该服务的复制品，这个Redis服务成为master，其他复制品成为slaves\n\n2、master会一直将自己的数据更新同步给slaves，保持主从同步\n\n3、只有master可以执行写命令，slave只能执行读命令\n\n作用:分担了读的压力 (高并发);提高可用性原理: 从服务器执行客户端发送的读命令，客户端可以连接slaves执行读请求，来降低master的读压力\n\n命令：\n\n```\nredis-server --slaveof <master-ip> <master-port>--masterauth <master password>\n```\n\n实际操作如下：\n\n```\nredis-serevr --slaveof 127.0.0.1 6379 --port 6300\n# 客户端\nredis-cli -p 6300\nkeys *\nser mykey abc # 此处代码错误，从的redis只读\n```\n\n此时有两条命令：\n1、slaveofIP PORT 成为谁的从\n\n2、slaveof no one自封为王\n\n加载配置文件：\n\n我们可以复制一个配置文件，然后在启动一个新的rendis服务的时候运用新建的配置文件。\n\n```\n6379 -> /etc/redis/redis.conf\n6300 -> /home/tarean/redis_6300.conf\n```\n\n修改配置文件内容\n\n```\nvim redis_6300.conf\n# 修改内容如下：\nslaveof 127.0.0.1 6379 # 跟随哪个主redis\nport 6300 # 启动的端口\n# 修改完配置文件内容，启动新的redis服务\nredis-server ./redis_6300.conf\n```\n\n## 哨兵\n\n概念：\n\n1、Sentinel会不断检查Master和Slaves是否正常\n2、每一个Sentinel可以监控任意多个Master和该Master下的Slaves\n\n原理:\n\n正如其名，哨兵进程定期与 redis主从进行通信，当哨兵认为redis主阵亡后[通信无返回]，自动将切换工作完成\n\n功能：\n\n自动化处理`redis主从切换`\n\n### 准备测试环境\n\n共3个redis的服务\n\n1、启动6379的redis服务器\n\n```\nsudo /etc/init.d/redis-server start\n```\n\n2、启动6380的redis服务器，设置为6379的从\n\n```\nredis-server --port 6380\ntarena@tedu:~$ redis-cli -p 6380\n127.0.0.1:6380> slaveof 127.0.0.1 6379\nOK\n```\n\n3、启动6381的redis服务器，设置为6379的从\n\n```\nredis-server --port 6381\ntarena@tedu:~$ redis-cli -p 6381\n127.0.0.1:6381> slaveof 127.0.0.1 6379\nOK\n```\n\n### 安装哨兵和启动哨兵\n\n1、安装redis-sentinel\n\n```\nsudo apt install redis-sentinel\n```\n\n验证: `sudo /etc/init.d/redis-sentinel stop`\n\n2、新建配置文件 sentinel.conf\n\n```\nport 26379\nsentinel monitor tedu 127.0.0.1 6379 1 （如果投票超过一票那么代表此服务出现问题）\n```\n\n启动哨兵的数量最好为奇数，哨兵判断Master是否阵亡需要投票。\n\n 3、启动sentinel\n方式一: `redis-sentinel sentinel.conf`\n\n方式二: `redis-server sentinel.conf --sentinel`\n\n4、将master的redis服务终止，查看从是否会提升为主\n\n```\nsudo /etc/init.d/redis-server stop\n```\n\n发现提升6381为master，其他两个为从\n\n在6381上设置新值，6380查看\n\n```\n127.0.0.1:6381> set name tedu\n```\n\nOK\n\n完成以上的操作，哨兵会跟配置文件中的redis服务取得联系。如果Master服务挂掉了，即使后面被复活也不会重新变为Master（因为长时间没参与业务）。\n\n### 配置文件详解\n\nsentine1监听端口，默认是26379，可以修改\n\n```\nport 26379\n```\n\n告诉sentine1去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum是一个数字，指明当有多少个sentine]认为一个naster失效时，master才算真正失效\n\n```\nsentinel monitor <master-name> <ip> <redis-port> <quorum>\n```\n\n如果master有密码，则需要添加该配置\n\n```\nsentinel auth-pass <master-name> <password>\n```\n\nmaster多久失联才认为是不可用了，默认是30秒\n\n```\nsentinel down-after-milTiseconds <master-name> <milTiseconds>\n```\n\n### Python操作哨兵\n\n代码如下：\n\n```python\nfrom redis.sentinel import Sentinel\n#生成哨兵连接\nsentinel = Sentinel([('127.0.0.1',26379)],socket_timeout=0.1)\n#初始化master连接\nmaster = sentinel.master_for('tedu', socket_timeout=0.1,db=1)\nslave = sentinel.slave_for('tedu',socket_timeout=0.1， db=1)\n#使用redis相关命令\nmaster.set('mymaster','yes')\nprint(slave.get('mymaster'))\n```\n","source":"_posts/Redis学习笔记一.md","raw":"---\ntitle: Redis学习笔记（一）\ndate: 2023-09-19 23:02:02\ntags: Redis\n---\n# redis基础操作\n\n## 位图操作\n\n位图不是真正的数据,他是定义在字符串类型中。一个字符串的key最多存储512字节的内容，位上限：2^32。\n\n## 相关命令\n\n### setbit\n\n设置某位置上的二进制，语法如下：\n\n```redis\nsetbit key offset(偏移量) value(值)\n```\n\n效果如下：\n\n```\nset mykey ab\nget mykey  ->  ab\nsetbit mykey 6 1\nget mkey  -> cb\n```\n\n如果当前设置的位置不存在，那么redis会自动帮助我们扩展位置（默认补0）：\n\n```\nset mykey ab\nget mykey  ->  ab\nsetbit mykey 17 1\nget mkey  -> cb@\n```\n\n如果设置的key不存在，redis会自动帮我们创建这样一个key\n\n```\nsetbit hello 4 1\nget hello -> /b\n```\n\n### getbit\n\n获取某一个位置上的值：\n\n```\ngetbit key offset\n```\n\n### bitcount\n\n统计键中对应的值有多少个1：\n\n```\nbitcount key start end (start/end代表索引`字节`)\n```\n\n效果如下：\n\n```\nset mykey ab\nget mykey -> ab\nbitcount mykey 0 0 -> 3\n```\n\n## python操作位图\n\n```python\nimport redis\nr = redis.Redis(host='xxxx',port='6379',db=0)\nr.setbit('mykey',4,1)\nprint(r.getbit('mykey',3))\n```\n\n## 主从复制\n\n它通常是指，通高可用 - 是系统架构设计中必须考虑的因素之一，过设计减少系统不能提供服务的时间目标:消除基础架构中的单点故障redis单进程单线程模式，如果redis进程挂掉，相关依赖的服务就难以正常服务。  \n\nredis高可用方案-主从搭建 +哨兵  \n\n1、一个Redis服务可以有多个该服务的复制品，这个Redis服务成为master，其他复制品成为slaves\n\n2、master会一直将自己的数据更新同步给slaves，保持主从同步\n\n3、只有master可以执行写命令，slave只能执行读命令\n\n作用:分担了读的压力 (高并发);提高可用性原理: 从服务器执行客户端发送的读命令，客户端可以连接slaves执行读请求，来降低master的读压力\n\n命令：\n\n```\nredis-server --slaveof <master-ip> <master-port>--masterauth <master password>\n```\n\n实际操作如下：\n\n```\nredis-serevr --slaveof 127.0.0.1 6379 --port 6300\n# 客户端\nredis-cli -p 6300\nkeys *\nser mykey abc # 此处代码错误，从的redis只读\n```\n\n此时有两条命令：\n1、slaveofIP PORT 成为谁的从\n\n2、slaveof no one自封为王\n\n加载配置文件：\n\n我们可以复制一个配置文件，然后在启动一个新的rendis服务的时候运用新建的配置文件。\n\n```\n6379 -> /etc/redis/redis.conf\n6300 -> /home/tarean/redis_6300.conf\n```\n\n修改配置文件内容\n\n```\nvim redis_6300.conf\n# 修改内容如下：\nslaveof 127.0.0.1 6379 # 跟随哪个主redis\nport 6300 # 启动的端口\n# 修改完配置文件内容，启动新的redis服务\nredis-server ./redis_6300.conf\n```\n\n## 哨兵\n\n概念：\n\n1、Sentinel会不断检查Master和Slaves是否正常\n2、每一个Sentinel可以监控任意多个Master和该Master下的Slaves\n\n原理:\n\n正如其名，哨兵进程定期与 redis主从进行通信，当哨兵认为redis主阵亡后[通信无返回]，自动将切换工作完成\n\n功能：\n\n自动化处理`redis主从切换`\n\n### 准备测试环境\n\n共3个redis的服务\n\n1、启动6379的redis服务器\n\n```\nsudo /etc/init.d/redis-server start\n```\n\n2、启动6380的redis服务器，设置为6379的从\n\n```\nredis-server --port 6380\ntarena@tedu:~$ redis-cli -p 6380\n127.0.0.1:6380> slaveof 127.0.0.1 6379\nOK\n```\n\n3、启动6381的redis服务器，设置为6379的从\n\n```\nredis-server --port 6381\ntarena@tedu:~$ redis-cli -p 6381\n127.0.0.1:6381> slaveof 127.0.0.1 6379\nOK\n```\n\n### 安装哨兵和启动哨兵\n\n1、安装redis-sentinel\n\n```\nsudo apt install redis-sentinel\n```\n\n验证: `sudo /etc/init.d/redis-sentinel stop`\n\n2、新建配置文件 sentinel.conf\n\n```\nport 26379\nsentinel monitor tedu 127.0.0.1 6379 1 （如果投票超过一票那么代表此服务出现问题）\n```\n\n启动哨兵的数量最好为奇数，哨兵判断Master是否阵亡需要投票。\n\n 3、启动sentinel\n方式一: `redis-sentinel sentinel.conf`\n\n方式二: `redis-server sentinel.conf --sentinel`\n\n4、将master的redis服务终止，查看从是否会提升为主\n\n```\nsudo /etc/init.d/redis-server stop\n```\n\n发现提升6381为master，其他两个为从\n\n在6381上设置新值，6380查看\n\n```\n127.0.0.1:6381> set name tedu\n```\n\nOK\n\n完成以上的操作，哨兵会跟配置文件中的redis服务取得联系。如果Master服务挂掉了，即使后面被复活也不会重新变为Master（因为长时间没参与业务）。\n\n### 配置文件详解\n\nsentine1监听端口，默认是26379，可以修改\n\n```\nport 26379\n```\n\n告诉sentine1去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum是一个数字，指明当有多少个sentine]认为一个naster失效时，master才算真正失效\n\n```\nsentinel monitor <master-name> <ip> <redis-port> <quorum>\n```\n\n如果master有密码，则需要添加该配置\n\n```\nsentinel auth-pass <master-name> <password>\n```\n\nmaster多久失联才认为是不可用了，默认是30秒\n\n```\nsentinel down-after-milTiseconds <master-name> <milTiseconds>\n```\n\n### Python操作哨兵\n\n代码如下：\n\n```python\nfrom redis.sentinel import Sentinel\n#生成哨兵连接\nsentinel = Sentinel([('127.0.0.1',26379)],socket_timeout=0.1)\n#初始化master连接\nmaster = sentinel.master_for('tedu', socket_timeout=0.1,db=1)\nslave = sentinel.slave_for('tedu',socket_timeout=0.1， db=1)\n#使用redis相关命令\nmaster.set('mymaster','yes')\nprint(slave.get('mymaster'))\n```\n","slug":"Redis学习笔记一","published":1,"updated":"2023-09-19T15:04:38.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9kw00055otx43p42u4d","content":"<h1 id=\"redis基础操作\"><a href=\"#redis基础操作\" class=\"headerlink\" title=\"redis基础操作\"></a>redis基础操作</h1><h2 id=\"位图操作\"><a href=\"#位图操作\" class=\"headerlink\" title=\"位图操作\"></a>位图操作</h2><p>位图不是真正的数据,他是定义在字符串类型中。一个字符串的key最多存储512字节的内容，位上限：2^32。</p>\n<h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><h3 id=\"setbit\"><a href=\"#setbit\" class=\"headerlink\" title=\"setbit\"></a>setbit</h3><p>设置某位置上的二进制，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit key offset(偏移量) value(值)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mykey ab</span><br><span class=\"line\">get mykey  -&gt;  ab</span><br><span class=\"line\">setbit mykey 6 1</span><br><span class=\"line\">get mkey  -&gt; cb</span><br></pre></td></tr></table></figure>\n\n<p>如果当前设置的位置不存在，那么redis会自动帮助我们扩展位置（默认补0）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mykey ab</span><br><span class=\"line\">get mykey  -&gt;  ab</span><br><span class=\"line\">setbit mykey 17 1</span><br><span class=\"line\">get mkey  -&gt; cb@</span><br></pre></td></tr></table></figure>\n\n<p>如果设置的key不存在，redis会自动帮我们创建这样一个key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit hello 4 1</span><br><span class=\"line\">get hello -&gt; /b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getbit\"><a href=\"#getbit\" class=\"headerlink\" title=\"getbit\"></a>getbit</h3><p>获取某一个位置上的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getbit key offset</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bitcount\"><a href=\"#bitcount\" class=\"headerlink\" title=\"bitcount\"></a>bitcount</h3><p>统计键中对应的值有多少个1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitcount key start end (start/end代表索引`字节`)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mykey ab</span><br><span class=\"line\">get mykey -&gt; ab</span><br><span class=\"line\">bitcount mykey 0 0 -&gt; 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python操作位图\"><a href=\"#python操作位图\" class=\"headerlink\" title=\"python操作位图\"></a>python操作位图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\">r = redis.Redis(host=<span class=\"string\">&#x27;xxxx&#x27;</span>,port=<span class=\"string\">&#x27;6379&#x27;</span>,db=<span class=\"number\">0</span>)</span><br><span class=\"line\">r.setbit(<span class=\"string\">&#x27;mykey&#x27;</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.getbit(<span class=\"string\">&#x27;mykey&#x27;</span>,<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>它通常是指，通高可用 - 是系统架构设计中必须考虑的因素之一，过设计减少系统不能提供服务的时间目标:消除基础架构中的单点故障redis单进程单线程模式，如果redis进程挂掉，相关依赖的服务就难以正常服务。  </p>\n<p>redis高可用方案-主从搭建 +哨兵  </p>\n<p>1、一个Redis服务可以有多个该服务的复制品，这个Redis服务成为master，其他复制品成为slaves</p>\n<p>2、master会一直将自己的数据更新同步给slaves，保持主从同步</p>\n<p>3、只有master可以执行写命令，slave只能执行读命令</p>\n<p>作用:分担了读的压力 (高并发);提高可用性原理: 从服务器执行客户端发送的读命令，客户端可以连接slaves执行读请求，来降低master的读压力</p>\n<p>命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --slaveof &lt;master-ip&gt; &lt;master-port&gt;--masterauth &lt;master password&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实际操作如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-serevr --slaveof 127.0.0.1 6379 --port 6300</span><br><span class=\"line\"># 客户端</span><br><span class=\"line\">redis-cli -p 6300</span><br><span class=\"line\">keys *</span><br><span class=\"line\">ser mykey abc # 此处代码错误，从的redis只读</span><br></pre></td></tr></table></figure>\n\n<p>此时有两条命令：<br>1、slaveofIP PORT 成为谁的从</p>\n<p>2、slaveof no one自封为王</p>\n<p>加载配置文件：</p>\n<p>我们可以复制一个配置文件，然后在启动一个新的rendis服务的时候运用新建的配置文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6379 -&gt; /etc/redis/redis.conf</span><br><span class=\"line\">6300 -&gt; /home/tarean/redis_6300.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim redis_6300.conf</span><br><span class=\"line\"># 修改内容如下：</span><br><span class=\"line\">slaveof 127.0.0.1 6379 # 跟随哪个主redis</span><br><span class=\"line\">port 6300 # 启动的端口</span><br><span class=\"line\"># 修改完配置文件内容，启动新的redis服务</span><br><span class=\"line\">redis-server ./redis_6300.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"哨兵\"><a href=\"#哨兵\" class=\"headerlink\" title=\"哨兵\"></a>哨兵</h2><p>概念：</p>\n<p>1、Sentinel会不断检查Master和Slaves是否正常<br>2、每一个Sentinel可以监控任意多个Master和该Master下的Slaves</p>\n<p>原理:</p>\n<p>正如其名，哨兵进程定期与 redis主从进行通信，当哨兵认为redis主阵亡后[通信无返回]，自动将切换工作完成</p>\n<p>功能：</p>\n<p>自动化处理<code>redis主从切换</code></p>\n<h3 id=\"准备测试环境\"><a href=\"#准备测试环境\" class=\"headerlink\" title=\"准备测试环境\"></a>准备测试环境</h3><p>共3个redis的服务</p>\n<p>1、启动6379的redis服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/redis-server start</span><br></pre></td></tr></table></figure>\n\n<p>2、启动6380的redis服务器，设置为6379的从</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --port 6380</span><br><span class=\"line\">tarena@tedu:~$ redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>3、启动6381的redis服务器，设置为6379的从</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --port 6381</span><br><span class=\"line\">tarena@tedu:~$ redis-cli -p 6381</span><br><span class=\"line\">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装哨兵和启动哨兵\"><a href=\"#安装哨兵和启动哨兵\" class=\"headerlink\" title=\"安装哨兵和启动哨兵\"></a>安装哨兵和启动哨兵</h3><p>1、安装redis-sentinel</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install redis-sentinel</span><br></pre></td></tr></table></figure>\n\n<p>验证: <code>sudo /etc/init.d/redis-sentinel stop</code></p>\n<p>2、新建配置文件 sentinel.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 26379</span><br><span class=\"line\">sentinel monitor tedu 127.0.0.1 6379 1 （如果投票超过一票那么代表此服务出现问题）</span><br></pre></td></tr></table></figure>\n\n<p>启动哨兵的数量最好为奇数，哨兵判断Master是否阵亡需要投票。</p>\n<p> 3、启动sentinel<br>方式一: <code>redis-sentinel sentinel.conf</code></p>\n<p>方式二: <code>redis-server sentinel.conf --sentinel</code></p>\n<p>4、将master的redis服务终止，查看从是否会提升为主</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/redis-server stop</span><br></pre></td></tr></table></figure>\n\n<p>发现提升6381为master，其他两个为从</p>\n<p>在6381上设置新值，6380查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; set name tedu</span><br></pre></td></tr></table></figure>\n\n<p>OK</p>\n<p>完成以上的操作，哨兵会跟配置文件中的redis服务取得联系。如果Master服务挂掉了，即使后面被复活也不会重新变为Master（因为长时间没参与业务）。</p>\n<h3 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h3><p>sentine1监听端口，默认是26379，可以修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 26379</span><br></pre></td></tr></table></figure>\n\n<p>告诉sentine1去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum是一个数字，指明当有多少个sentine]认为一个naster失效时，master才算真正失效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果master有密码，则需要添加该配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<p>master多久失联才认为是不可用了，默认是30秒</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel down-after-milTiseconds &lt;master-name&gt; &lt;milTiseconds&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python操作哨兵\"><a href=\"#Python操作哨兵\" class=\"headerlink\" title=\"Python操作哨兵\"></a>Python操作哨兵</h3><p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> redis.sentinel <span class=\"keyword\">import</span> Sentinel</span><br><span class=\"line\"><span class=\"comment\">#生成哨兵连接</span></span><br><span class=\"line\">sentinel = Sentinel([(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">26379</span>)],socket_timeout=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"comment\">#初始化master连接</span></span><br><span class=\"line\">master = sentinel.master_for(<span class=\"string\">&#x27;tedu&#x27;</span>, socket_timeout=<span class=\"number\">0.1</span>,db=<span class=\"number\">1</span>)</span><br><span class=\"line\">slave = sentinel.slave_for(<span class=\"string\">&#x27;tedu&#x27;</span>,socket_timeout=<span class=\"number\">0.1</span>， db=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#使用redis相关命令</span></span><br><span class=\"line\">master.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;mymaster&#x27;</span>,<span class=\"string\">&#x27;yes&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(slave.get(<span class=\"string\">&#x27;mymaster&#x27;</span>))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redis基础操作\"><a href=\"#redis基础操作\" class=\"headerlink\" title=\"redis基础操作\"></a>redis基础操作</h1><h2 id=\"位图操作\"><a href=\"#位图操作\" class=\"headerlink\" title=\"位图操作\"></a>位图操作</h2><p>位图不是真正的数据,他是定义在字符串类型中。一个字符串的key最多存储512字节的内容，位上限：2^32。</p>\n<h2 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h2><h3 id=\"setbit\"><a href=\"#setbit\" class=\"headerlink\" title=\"setbit\"></a>setbit</h3><p>设置某位置上的二进制，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit key offset(偏移量) value(值)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mykey ab</span><br><span class=\"line\">get mykey  -&gt;  ab</span><br><span class=\"line\">setbit mykey 6 1</span><br><span class=\"line\">get mkey  -&gt; cb</span><br></pre></td></tr></table></figure>\n\n<p>如果当前设置的位置不存在，那么redis会自动帮助我们扩展位置（默认补0）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mykey ab</span><br><span class=\"line\">get mykey  -&gt;  ab</span><br><span class=\"line\">setbit mykey 17 1</span><br><span class=\"line\">get mkey  -&gt; cb@</span><br></pre></td></tr></table></figure>\n\n<p>如果设置的key不存在，redis会自动帮我们创建这样一个key</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setbit hello 4 1</span><br><span class=\"line\">get hello -&gt; /b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getbit\"><a href=\"#getbit\" class=\"headerlink\" title=\"getbit\"></a>getbit</h3><p>获取某一个位置上的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getbit key offset</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bitcount\"><a href=\"#bitcount\" class=\"headerlink\" title=\"bitcount\"></a>bitcount</h3><p>统计键中对应的值有多少个1：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bitcount key start end (start/end代表索引`字节`)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mykey ab</span><br><span class=\"line\">get mykey -&gt; ab</span><br><span class=\"line\">bitcount mykey 0 0 -&gt; 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"python操作位图\"><a href=\"#python操作位图\" class=\"headerlink\" title=\"python操作位图\"></a>python操作位图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\">r = redis.Redis(host=<span class=\"string\">&#x27;xxxx&#x27;</span>,port=<span class=\"string\">&#x27;6379&#x27;</span>,db=<span class=\"number\">0</span>)</span><br><span class=\"line\">r.setbit(<span class=\"string\">&#x27;mykey&#x27;</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(r.getbit(<span class=\"string\">&#x27;mykey&#x27;</span>,<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><p>它通常是指，通高可用 - 是系统架构设计中必须考虑的因素之一，过设计减少系统不能提供服务的时间目标:消除基础架构中的单点故障redis单进程单线程模式，如果redis进程挂掉，相关依赖的服务就难以正常服务。  </p>\n<p>redis高可用方案-主从搭建 +哨兵  </p>\n<p>1、一个Redis服务可以有多个该服务的复制品，这个Redis服务成为master，其他复制品成为slaves</p>\n<p>2、master会一直将自己的数据更新同步给slaves，保持主从同步</p>\n<p>3、只有master可以执行写命令，slave只能执行读命令</p>\n<p>作用:分担了读的压力 (高并发);提高可用性原理: 从服务器执行客户端发送的读命令，客户端可以连接slaves执行读请求，来降低master的读压力</p>\n<p>命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --slaveof &lt;master-ip&gt; &lt;master-port&gt;--masterauth &lt;master password&gt;</span><br></pre></td></tr></table></figure>\n\n<p>实际操作如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-serevr --slaveof 127.0.0.1 6379 --port 6300</span><br><span class=\"line\"># 客户端</span><br><span class=\"line\">redis-cli -p 6300</span><br><span class=\"line\">keys *</span><br><span class=\"line\">ser mykey abc # 此处代码错误，从的redis只读</span><br></pre></td></tr></table></figure>\n\n<p>此时有两条命令：<br>1、slaveofIP PORT 成为谁的从</p>\n<p>2、slaveof no one自封为王</p>\n<p>加载配置文件：</p>\n<p>我们可以复制一个配置文件，然后在启动一个新的rendis服务的时候运用新建的配置文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6379 -&gt; /etc/redis/redis.conf</span><br><span class=\"line\">6300 -&gt; /home/tarean/redis_6300.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim redis_6300.conf</span><br><span class=\"line\"># 修改内容如下：</span><br><span class=\"line\">slaveof 127.0.0.1 6379 # 跟随哪个主redis</span><br><span class=\"line\">port 6300 # 启动的端口</span><br><span class=\"line\"># 修改完配置文件内容，启动新的redis服务</span><br><span class=\"line\">redis-server ./redis_6300.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"哨兵\"><a href=\"#哨兵\" class=\"headerlink\" title=\"哨兵\"></a>哨兵</h2><p>概念：</p>\n<p>1、Sentinel会不断检查Master和Slaves是否正常<br>2、每一个Sentinel可以监控任意多个Master和该Master下的Slaves</p>\n<p>原理:</p>\n<p>正如其名，哨兵进程定期与 redis主从进行通信，当哨兵认为redis主阵亡后[通信无返回]，自动将切换工作完成</p>\n<p>功能：</p>\n<p>自动化处理<code>redis主从切换</code></p>\n<h3 id=\"准备测试环境\"><a href=\"#准备测试环境\" class=\"headerlink\" title=\"准备测试环境\"></a>准备测试环境</h3><p>共3个redis的服务</p>\n<p>1、启动6379的redis服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/redis-server start</span><br></pre></td></tr></table></figure>\n\n<p>2、启动6380的redis服务器，设置为6379的从</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --port 6380</span><br><span class=\"line\">tarena@tedu:~$ redis-cli -p 6380</span><br><span class=\"line\">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>3、启动6381的redis服务器，设置为6379的从</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --port 6381</span><br><span class=\"line\">tarena@tedu:~$ redis-cli -p 6381</span><br><span class=\"line\">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装哨兵和启动哨兵\"><a href=\"#安装哨兵和启动哨兵\" class=\"headerlink\" title=\"安装哨兵和启动哨兵\"></a>安装哨兵和启动哨兵</h3><p>1、安装redis-sentinel</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install redis-sentinel</span><br></pre></td></tr></table></figure>\n\n<p>验证: <code>sudo /etc/init.d/redis-sentinel stop</code></p>\n<p>2、新建配置文件 sentinel.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 26379</span><br><span class=\"line\">sentinel monitor tedu 127.0.0.1 6379 1 （如果投票超过一票那么代表此服务出现问题）</span><br></pre></td></tr></table></figure>\n\n<p>启动哨兵的数量最好为奇数，哨兵判断Master是否阵亡需要投票。</p>\n<p> 3、启动sentinel<br>方式一: <code>redis-sentinel sentinel.conf</code></p>\n<p>方式二: <code>redis-server sentinel.conf --sentinel</code></p>\n<p>4、将master的redis服务终止，查看从是否会提升为主</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/redis-server stop</span><br></pre></td></tr></table></figure>\n\n<p>发现提升6381为master，其他两个为从</p>\n<p>在6381上设置新值，6380查看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6381&gt; set name tedu</span><br></pre></td></tr></table></figure>\n\n<p>OK</p>\n<p>完成以上的操作，哨兵会跟配置文件中的redis服务取得联系。如果Master服务挂掉了，即使后面被复活也不会重新变为Master（因为长时间没参与业务）。</p>\n<h3 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h3><p>sentine1监听端口，默认是26379，可以修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port 26379</span><br></pre></td></tr></table></figure>\n\n<p>告诉sentine1去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum是一个数字，指明当有多少个sentine]认为一个naster失效时，master才算真正失效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果master有密码，则需要添加该配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<p>master多久失联才认为是不可用了，默认是30秒</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel down-after-milTiseconds &lt;master-name&gt; &lt;milTiseconds&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python操作哨兵\"><a href=\"#Python操作哨兵\" class=\"headerlink\" title=\"Python操作哨兵\"></a>Python操作哨兵</h3><p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> redis.sentinel <span class=\"keyword\">import</span> Sentinel</span><br><span class=\"line\"><span class=\"comment\">#生成哨兵连接</span></span><br><span class=\"line\">sentinel = Sentinel([(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">26379</span>)],socket_timeout=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"><span class=\"comment\">#初始化master连接</span></span><br><span class=\"line\">master = sentinel.master_for(<span class=\"string\">&#x27;tedu&#x27;</span>, socket_timeout=<span class=\"number\">0.1</span>,db=<span class=\"number\">1</span>)</span><br><span class=\"line\">slave = sentinel.slave_for(<span class=\"string\">&#x27;tedu&#x27;</span>,socket_timeout=<span class=\"number\">0.1</span>， db=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#使用redis相关命令</span></span><br><span class=\"line\">master.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;mymaster&#x27;</span>,<span class=\"string\">&#x27;yes&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(slave.get(<span class=\"string\">&#x27;mymaster&#x27;</span>))</span><br></pre></td></tr></table></figure>\n"},{"title":"vue学习笔记（一）","date":"2023-06-26T23:58:05.000Z","_content":"\n## ref系列\n\n### ref\n\n以下是ref的基本使用：\n\n```TypeScript\ntype Person = {\n  name:string,\n  age:number\n}\n\nconst person =  ref<Person>({\n  name:\"Jessie\",\n  age:18\n})\n```\n\n### shallowRef\n\n作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：\n\n```TypeScript\nconst person =  shallowRef<Person>({\n  name:\"Jessie\",\n  age:18\n})\nperson.value = {\n  name:\"Chan\",\n  age:20\n}\n```\n\n注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为*ref*底层已经调用了*triggerRef*导致依赖收集更新。\n\n### customRef\n\n自定义ref\n\n```TypeScript\nfunction MyRef<T>(value:T){\n  return customRef((track,trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newVal){\n        value = newVal\n        trigger()\n      }\n    }\n  })\n} \n```\n\n### ref获取dom元素\n\n```TypeScript\n....\n<div ref=\"dom\"></div>\n....\n\nconst dom  = ref<HTMLDivElement>()\ndom.value?.innerHTML\n```\n\n### 原理解析\n\nref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为*triggerRefValue*这个函数，ref和triggerRef这两个函数底层都调用了这个函数。\n\n## Reactive系列\n\n### reactive\n\n基本使用\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\nform.name \n```\n\n注意： 数组不能直接赋值，否则破坏响应式对象\n\n```TypeScript\nlet arr = [1,2,3,4]\nlet list = reactive([])\n// list = arr 错误\nlist.push(...arr)\n\n// 或者\nlet arr = [1,2,3,4]\nlet list = reactive<{\n   arr:string[]\n}>({\n arr:[]\n})\nlist.arr = arr\n```\n\n### readonly\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\n// 只读对象\nlet read = readonly(form)\n```\n\n注意：此时read对象仍旧收到原来form对象的影\n\n### shallowReactive\n\n基本使用：\n\n```TypeScript\nlet form = shallowReactive({\n  // 此时只能监听到foo层\n   foo:{\n     name:{\n        xing:'Chan',\n        ming:'Jessie'\n     }\n   }\n})\n```\n\n注意：shallowReactive与reactive同样不能一起用，否则会出现与上述*ref*相同的问题。\n\n## to系列\n\n### toRef\n\n只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。\n\n```TypeScript\nconst person = reactive({ name:\"Jessie\" , age:20 })\nlet name = toRef(person,\"name\")\n\nconst test(name:Ref<string>){\n   ......\n}\ntest(name)\n```\n\n### toRefs\n\n源码\n\n```TypeScript\nconst  toRefs = <T extends object>(object:T){\n  const map:any = {}\n  for(let key in object){\n    map[key] = toRef(object,key)\n  }\n  return map\n}\nconst {name,age} = toRefs(person)\n```\n\n注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs\n\n### toRaw\n\n取消响应式\n\n```TypeScript\ntoRaw(person)\n```\n","source":"_posts/vue学习笔记-一.md","raw":"---\ntitle: vue学习笔记（一）\ndate: 2023-06-27 07:58:05\ntags: Vue\n---\n\n## ref系列\n\n### ref\n\n以下是ref的基本使用：\n\n```TypeScript\ntype Person = {\n  name:string,\n  age:number\n}\n\nconst person =  ref<Person>({\n  name:\"Jessie\",\n  age:18\n})\n```\n\n### shallowRef\n\n作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：\n\n```TypeScript\nconst person =  shallowRef<Person>({\n  name:\"Jessie\",\n  age:18\n})\nperson.value = {\n  name:\"Chan\",\n  age:20\n}\n```\n\n注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为*ref*底层已经调用了*triggerRef*导致依赖收集更新。\n\n### customRef\n\n自定义ref\n\n```TypeScript\nfunction MyRef<T>(value:T){\n  return customRef((track,trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newVal){\n        value = newVal\n        trigger()\n      }\n    }\n  })\n} \n```\n\n### ref获取dom元素\n\n```TypeScript\n....\n<div ref=\"dom\"></div>\n....\n\nconst dom  = ref<HTMLDivElement>()\ndom.value?.innerHTML\n```\n\n### 原理解析\n\nref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为*triggerRefValue*这个函数，ref和triggerRef这两个函数底层都调用了这个函数。\n\n## Reactive系列\n\n### reactive\n\n基本使用\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\nform.name \n```\n\n注意： 数组不能直接赋值，否则破坏响应式对象\n\n```TypeScript\nlet arr = [1,2,3,4]\nlet list = reactive([])\n// list = arr 错误\nlist.push(...arr)\n\n// 或者\nlet arr = [1,2,3,4]\nlet list = reactive<{\n   arr:string[]\n}>({\n arr:[]\n})\nlist.arr = arr\n```\n\n### readonly\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\n// 只读对象\nlet read = readonly(form)\n```\n\n注意：此时read对象仍旧收到原来form对象的影\n\n### shallowReactive\n\n基本使用：\n\n```TypeScript\nlet form = shallowReactive({\n  // 此时只能监听到foo层\n   foo:{\n     name:{\n        xing:'Chan',\n        ming:'Jessie'\n     }\n   }\n})\n```\n\n注意：shallowReactive与reactive同样不能一起用，否则会出现与上述*ref*相同的问题。\n\n## to系列\n\n### toRef\n\n只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。\n\n```TypeScript\nconst person = reactive({ name:\"Jessie\" , age:20 })\nlet name = toRef(person,\"name\")\n\nconst test(name:Ref<string>){\n   ......\n}\ntest(name)\n```\n\n### toRefs\n\n源码\n\n```TypeScript\nconst  toRefs = <T extends object>(object:T){\n  const map:any = {}\n  for(let key in object){\n    map[key] = toRef(object,key)\n  }\n  return map\n}\nconst {name,age} = toRefs(person)\n```\n\n注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs\n\n### toRaw\n\n取消响应式\n\n```TypeScript\ntoRaw(person)\n```\n","slug":"vue学习笔记-一","published":1,"updated":"2023-09-21T15:13:56.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9ky00085otx47kz0yav","content":"<h2 id=\"ref系列\"><a href=\"#ref系列\" class=\"headerlink\" title=\"ref系列\"></a>ref系列</h2><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>以下是ref的基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person =  ref&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shallowRef\"><a href=\"#shallowRef\" class=\"headerlink\" title=\"shallowRef\"></a>shallowRef</h3><p>作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person =  shallowRef&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">person.<span class=\"property\">value</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Chan&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为<em>ref</em>底层已经调用了<em>triggerRef</em>导致依赖收集更新。</p>\n<h3 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef\"></a>customRef</h3><p>自定义ref</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">MyRef</span>&lt;T&gt;(<span class=\"attr\">value</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">track</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>)&#123;</span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ref获取dom元素\"><a href=\"#ref获取dom元素\" class=\"headerlink\" title=\"ref获取dom元素\"></a>ref获取dom元素</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">&lt;div ref=<span class=\"string\">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom  = ref&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;()</span><br><span class=\"line\">dom.<span class=\"property\">value</span>?.<span class=\"property\">innerHTML</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p>ref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为<em>triggerRefValue</em>这个函数，ref和triggerRef这两个函数底层都调用了这个函数。</p>\n<h2 id=\"Reactive系列\"><a href=\"#Reactive系列\" class=\"headerlink\" title=\"Reactive系列\"></a>Reactive系列</h2><h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p>基本使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">form.<span class=\"property\">name</span> </span><br></pre></td></tr></table></figure>\n\n<p>注意： 数组不能直接赋值，否则破坏响应式对象</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"title function_\">reactive</span>([])</span><br><span class=\"line\"><span class=\"comment\">// list = arr 错误</span></span><br><span class=\"line\">list.<span class=\"title function_\">push</span>(...arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = reactive&lt;&#123;</span><br><span class=\"line\">   <span class=\"attr\">arr</span>:<span class=\"built_in\">string</span>[]</span><br><span class=\"line\">&#125;&gt;(&#123;</span><br><span class=\"line\"> <span class=\"attr\">arr</span>:[]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">list.<span class=\"property\">arr</span> = arr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 只读对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> read = <span class=\"title function_\">readonly</span>(form)</span><br></pre></td></tr></table></figure>\n\n<p>注意：此时read对象仍旧收到原来form对象的影</p>\n<h3 id=\"shallowReactive\"><a href=\"#shallowReactive\" class=\"headerlink\" title=\"shallowReactive\"></a>shallowReactive</h3><p>基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时只能监听到foo层</span></span><br><span class=\"line\">   <span class=\"attr\">foo</span>:&#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">xing</span>:<span class=\"string\">&#x27;Chan&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">ming</span>:<span class=\"string\">&#x27;Jessie&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：shallowReactive与reactive同样不能一起用，否则会出现与上述<em>ref</em>相同的问题。</p>\n<h2 id=\"to系列\"><a href=\"#to系列\" class=\"headerlink\" title=\"to系列\"></a>to系列</h2><h3 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h3><p>只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span> , <span class=\"attr\">age</span>:<span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">toRef</span>(person,<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span>(<span class=\"params\">name:Ref&lt;<span class=\"built_in\">string</span>&gt;</span>)&#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h3><p>源码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  toRefs = &lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt;(<span class=\"attr\">object</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">map</span>:<span class=\"built_in\">any</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">object</span>)&#123;</span><br><span class=\"line\">    map[key] = <span class=\"title function_\">toRef</span>(<span class=\"built_in\">object</span>,key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = <span class=\"title function_\">toRefs</span>(person)</span><br></pre></td></tr></table></figure>\n\n<p>注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs</p>\n<h3 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h3><p>取消响应式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toRaw</span>(person)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ref系列\"><a href=\"#ref系列\" class=\"headerlink\" title=\"ref系列\"></a>ref系列</h2><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>以下是ref的基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person =  ref&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shallowRef\"><a href=\"#shallowRef\" class=\"headerlink\" title=\"shallowRef\"></a>shallowRef</h3><p>作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person =  shallowRef&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">person.<span class=\"property\">value</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Chan&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为<em>ref</em>底层已经调用了<em>triggerRef</em>导致依赖收集更新。</p>\n<h3 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef\"></a>customRef</h3><p>自定义ref</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">MyRef</span>&lt;T&gt;(<span class=\"attr\">value</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">track</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>)&#123;</span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ref获取dom元素\"><a href=\"#ref获取dom元素\" class=\"headerlink\" title=\"ref获取dom元素\"></a>ref获取dom元素</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">&lt;div ref=<span class=\"string\">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom  = ref&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;()</span><br><span class=\"line\">dom.<span class=\"property\">value</span>?.<span class=\"property\">innerHTML</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p>ref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为<em>triggerRefValue</em>这个函数，ref和triggerRef这两个函数底层都调用了这个函数。</p>\n<h2 id=\"Reactive系列\"><a href=\"#Reactive系列\" class=\"headerlink\" title=\"Reactive系列\"></a>Reactive系列</h2><h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p>基本使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">form.<span class=\"property\">name</span> </span><br></pre></td></tr></table></figure>\n\n<p>注意： 数组不能直接赋值，否则破坏响应式对象</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"title function_\">reactive</span>([])</span><br><span class=\"line\"><span class=\"comment\">// list = arr 错误</span></span><br><span class=\"line\">list.<span class=\"title function_\">push</span>(...arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = reactive&lt;&#123;</span><br><span class=\"line\">   <span class=\"attr\">arr</span>:<span class=\"built_in\">string</span>[]</span><br><span class=\"line\">&#125;&gt;(&#123;</span><br><span class=\"line\"> <span class=\"attr\">arr</span>:[]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">list.<span class=\"property\">arr</span> = arr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 只读对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> read = <span class=\"title function_\">readonly</span>(form)</span><br></pre></td></tr></table></figure>\n\n<p>注意：此时read对象仍旧收到原来form对象的影</p>\n<h3 id=\"shallowReactive\"><a href=\"#shallowReactive\" class=\"headerlink\" title=\"shallowReactive\"></a>shallowReactive</h3><p>基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时只能监听到foo层</span></span><br><span class=\"line\">   <span class=\"attr\">foo</span>:&#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">xing</span>:<span class=\"string\">&#x27;Chan&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">ming</span>:<span class=\"string\">&#x27;Jessie&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：shallowReactive与reactive同样不能一起用，否则会出现与上述<em>ref</em>相同的问题。</p>\n<h2 id=\"to系列\"><a href=\"#to系列\" class=\"headerlink\" title=\"to系列\"></a>to系列</h2><h3 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h3><p>只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span> , <span class=\"attr\">age</span>:<span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">toRef</span>(person,<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span>(<span class=\"params\">name:Ref&lt;<span class=\"built_in\">string</span>&gt;</span>)&#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h3><p>源码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  toRefs = &lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt;(<span class=\"attr\">object</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">map</span>:<span class=\"built_in\">any</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">object</span>)&#123;</span><br><span class=\"line\">    map[key] = <span class=\"title function_\">toRef</span>(<span class=\"built_in\">object</span>,key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = <span class=\"title function_\">toRefs</span>(person)</span><br></pre></td></tr></table></figure>\n\n<p>注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs</p>\n<h3 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h3><p>取消响应式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toRaw</span>(person)</span><br></pre></td></tr></table></figure>\n"},{"title":"我的第一篇博客","date":"2023-06-19T14:22:56.000Z","_content":"\n### hello hexo\n\n这是我的第一篇博客,也是我改变世界的开始\n","source":"_posts/我的第一篇博客.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2023-06-19 22:22:56\ntags: 闲聊\n---\n\n### hello hexo\n\n这是我的第一篇博客,也是我改变世界的开始\n","slug":"我的第一篇博客","published":1,"updated":"2023-06-26T03:50:50.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmtbf9ky000a5otx4m2pc82g","content":"<h3 id=\"hello-hexo\"><a href=\"#hello-hexo\" class=\"headerlink\" title=\"hello hexo\"></a>hello hexo</h3><p>这是我的第一篇博客,也是我改变世界的开始</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"hello-hexo\"><a href=\"#hello-hexo\" class=\"headerlink\" title=\"hello hexo\"></a>hello hexo</h3><p>这是我的第一篇博客,也是我改变世界的开始</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clmtbf9kv00045otx664xdtpk","tag_id":"clmtbf9kt00025otx02flhdu8","_id":"clmtbf9ky00075otx5xhu3972"},{"post_id":"clmtbf9kn00005otxbw78bgtc","tag_id":"clmtbf9kt00025otx02flhdu8","_id":"clmtbf9ky00095otxb9cn2e2l"},{"post_id":"clmtbf9kr00015otx96o0coxm","tag_id":"clmtbf9kt00025otx02flhdu8","_id":"clmtbf9l0000c5otxd3l73mdu"},{"post_id":"clmtbf9ku00035otx04ci4ts7","tag_id":"clmtbf9kt00025otx02flhdu8","_id":"clmtbf9l0000e5otxcclb0uz5"},{"post_id":"clmtbf9kw00055otx43p42u4d","tag_id":"clmtbf9l0000d5otx95wba0pm","_id":"clmtbf9l0000g5otx45vr9ar2"},{"post_id":"clmtbf9ky00085otx47kz0yav","tag_id":"clmtbf9l0000f5otxbyc77kj3","_id":"clmtbf9l1000i5otx49pbfixx"},{"post_id":"clmtbf9ky000a5otx4m2pc82g","tag_id":"clmtbf9l1000h5otx70drb3k5","_id":"clmtbf9l1000j5otx6p6sdmmu"}],"Tag":[{"name":"Django","_id":"clmtbf9kt00025otx02flhdu8"},{"name":"Redis","_id":"clmtbf9l0000d5otx95wba0pm"},{"name":"Vue","_id":"clmtbf9l0000f5otxbyc77kj3"},{"name":"闲聊","_id":"clmtbf9l1000h5otx70drb3k5"}]}}