{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/img_23_9_10/img.png","path":"img_23_9_10/img.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_1.png","path":"img_23_9_10/img_1.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_11.png","path":"img_23_9_10/img_11.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_12.png","path":"img_23_9_10/img_12.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_2.png","path":"img_23_9_10/img_2.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_13.png","path":"img_23_9_10/img_13.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_10.png","path":"img_23_9_10/img_10.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_4.png","path":"img_23_9_10/img_4.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_3.png","path":"img_23_9_10/img_3.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_5.png","path":"img_23_9_10/img_5.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_6.png","path":"img_23_9_10/img_6.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_7.png","path":"img_23_9_10/img_7.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_8.png","path":"img_23_9_10/img_8.png","modified":0,"renderable":0},{"_id":"source/img_23_9_10/img_9.png","path":"img_23_9_10/img_9.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/vue学习笔记-一.md","hash":"b866f0364d23dfb6a15ad86bc500ad47ba6975d7","modified":1687851755743},{"_id":"source/_posts/我的第一篇博客.md","hash":"1654b8e339c2549a97f98e38e8b37d7f92606ae6","modified":1687751450727},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1687184519830},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1687184519884},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1687184519833},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1687184519888},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1687184519892},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1687184519453},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687184519896},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687184519899},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687184519900},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1687184519903},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1687184519901},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1687184519904},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1687184519905},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1687184519907},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1687184519908},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1687184519912},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1687184519909},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1687184519915},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1687184519917},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1687184519918},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1687184519920},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1687184519922},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1687184519921},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1687184519924},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1687184519925},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1687184519926},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1687184519932},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1687184519928},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1687184519936},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1687184519934},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1687184519938},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1687184519940},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1687184519941},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1687184519942},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1687184519943},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1687184519945},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1687184519626},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1687184519587},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1687184519704},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1687184519725},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1687184519708},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1687184519758},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1687184519730},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1687184519486},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1687184519805},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1687184519592},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1687184519493},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1687184519507},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1687184519672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1687184519652},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1687184519682},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1687184519689},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1687184519716},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1687184519693},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1687184519572},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1687184519740},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1687184519617},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1687184519755},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1687184519737},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1687184519767},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1687184519880},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1687184519838},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1687184519841},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1687184519469},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1687184519828},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1687184519606},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1687184519639},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1687184519658},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1687184519720},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1687184519747},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1687184519769},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1687184519866},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1687184519859},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1687184519849},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1687184519851},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1687184519853},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1687184519861},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1687184519856},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1687184519863},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1687184519867},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1687184519869},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1687184519875},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1687184519872},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1687184519825},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1687184519815},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1687184519802},{"_id":"public/2023/06/19/我的第一篇博客/index.html","hash":"261329dd7f360b51848d05c352094623c0eecc25","modified":1694337574778},{"_id":"public/archives/index.html","hash":"afc1e2cff385f9d249c35c764329cc829fa99daf","modified":1694337574778},{"_id":"public/archives/2023/index.html","hash":"d81524dda84a19728c145789e76b13daf00cb2b2","modified":1694337574778},{"_id":"public/archives/2023/06/index.html","hash":"cfb9314cf1306fec7da89e3a50864fd29a3426b0","modified":1694337574778},{"_id":"public/tags/Vue/index.html","hash":"83d187cf4188ae9e1bc79185f105792eec3c9a6f","modified":1694337574778},{"_id":"public/tags/闲聊/index.html","hash":"695466ffb56ff947e9007d22c7fccfc59e3bd7ea","modified":1694337574778},{"_id":"public/2023/06/27/vue学习笔记-一/index.html","hash":"c5349f63340f1dce68b53e04ac8e6a4433d2ee6c","modified":1694337574778},{"_id":"public/index.html","hash":"16851b7f7a190b1d57d5bb9bca13843562dde69a","modified":1694355960782},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1687852287225},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1687852287225},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1687852287225},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1687852287225},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1687852287225},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1687852287225},{"_id":"source/_posts/vue的学习笔记二.md","hash":"f1d5bc5687627f9d4eb3d6ee11c0deaec5458420","modified":1693394994963},{"_id":"public/2023/08/30/vue的学习笔记二/index.html","hash":"6f8a032a5ac57048c6270412bd5b815c32483a93","modified":1693395003548},{"_id":"public/archives/2023/08/index.html","hash":"f596d9eb83326ce2b7a943b37be5840282da60d9","modified":1693395003548},{"_id":"source/_posts/Django学习笔记一.md","hash":"16e61beaf5b58a606fa3d2cac359a0aca10e0f7e","modified":1694355953349},{"_id":"public/2023/09/10/Django学习笔记一/index.html","hash":"306de830763d2a0b35c5aa82a51739d8891b5f5c","modified":1694355960782},{"_id":"public/archives/2023/09/index.html","hash":"0903604a85f9af649d0a49eea1e09b1e8c0cb372","modified":1694337574778},{"_id":"public/tags/Django/index.html","hash":"ffa4df6310607225ffffd60d55d06af80753094d","modified":1694337574778},{"_id":"source/_posts/img_23_9_10/img.png","hash":"0e337c4174cec545cac17c464bc83a60790682eb","modified":1694338632804},{"_id":"source/_posts/img_23_9_10/img_11.png","hash":"0710b5463838bf411b351bce7372763570cece76","modified":1694355073078},{"_id":"source/_posts/img_23_9_10/img_10.png","hash":"435a834b191756e82bf63e33be32de77017d2134","modified":1694354882147},{"_id":"source/_posts/img_23_9_10/img_1.png","hash":"df0443ca40cbe139de0d26c22c68a7bb0340da92","modified":1694350534495},{"_id":"source/_posts/img_23_9_10/img_12.png","hash":"449633d54439ea579d6fe46e6b9ae2c21cb142fa","modified":1694355406694},{"_id":"source/_posts/img_23_9_10/img_13.png","hash":"d0447342a5b32749c7c3fc670f7db3ca0a6cd6da","modified":1694355594720},{"_id":"source/_posts/img_23_9_10/img_2.png","hash":"7229ba103c1373f09f4b7abf7e6cbb4d4832f064","modified":1694351097278},{"_id":"source/_posts/img_23_9_10/img_3.png","hash":"d44316f19fc92170270c4e82ecf9d42c1c270c5d","modified":1694351951031},{"_id":"source/_posts/img_23_9_10/img_4.png","hash":"66125fd0adceff2cc4e7efd275a3da95330773b5","modified":1694352106458},{"_id":"source/_posts/img_23_9_10/img_5.png","hash":"49e5ae54f5624693ea69a4f82dbd2c3f7fb86dd2","modified":1694352385018},{"_id":"source/_posts/img_23_9_10/img_7.png","hash":"91124cd071cb0fd86ef7551d3450419bac7ed26f","modified":1694354405640},{"_id":"source/_posts/img_23_9_10/img_6.png","hash":"11f9f0e465f3436e140da428244f194be96448b0","modified":1694353435335},{"_id":"source/_posts/img_23_9_10/img_8.png","hash":"3e24c44d19f563c4c491a18d6000481a6cf16670","modified":1694354586337},{"_id":"source/_posts/img_23_9_10/img_9.png","hash":"c23a9f89b78f3670e507c82deb9aa5c54e6ef7c8","modified":1694354780472},{"_id":"source/img_23_9_10/img.png","hash":"0e337c4174cec545cac17c464bc83a60790682eb","modified":1694338632804},{"_id":"source/img_23_9_10/img_1.png","hash":"df0443ca40cbe139de0d26c22c68a7bb0340da92","modified":1694350534495},{"_id":"source/img_23_9_10/img_13.png","hash":"d0447342a5b32749c7c3fc670f7db3ca0a6cd6da","modified":1694355594720},{"_id":"source/img_23_9_10/img_2.png","hash":"7229ba103c1373f09f4b7abf7e6cbb4d4832f064","modified":1694351097278},{"_id":"source/img_23_9_10/img_11.png","hash":"0710b5463838bf411b351bce7372763570cece76","modified":1694355073078},{"_id":"source/img_23_9_10/img_10.png","hash":"435a834b191756e82bf63e33be32de77017d2134","modified":1694354882147},{"_id":"source/img_23_9_10/img_4.png","hash":"66125fd0adceff2cc4e7efd275a3da95330773b5","modified":1694352106458},{"_id":"source/img_23_9_10/img_3.png","hash":"d44316f19fc92170270c4e82ecf9d42c1c270c5d","modified":1694351951031},{"_id":"source/img_23_9_10/img_5.png","hash":"49e5ae54f5624693ea69a4f82dbd2c3f7fb86dd2","modified":1694352385018},{"_id":"source/img_23_9_10/img_6.png","hash":"11f9f0e465f3436e140da428244f194be96448b0","modified":1694353435335},{"_id":"source/img_23_9_10/img_8.png","hash":"3e24c44d19f563c4c491a18d6000481a6cf16670","modified":1694354586337},{"_id":"source/img_23_9_10/img_7.png","hash":"91124cd071cb0fd86ef7551d3450419bac7ed26f","modified":1694354405640},{"_id":"source/img_23_9_10/img_12.png","hash":"449633d54439ea579d6fe46e6b9ae2c21cb142fa","modified":1694355406694},{"_id":"source/img_23_9_10/img_9.png","hash":"c23a9f89b78f3670e507c82deb9aa5c54e6ef7c8","modified":1694354780472},{"_id":"public/img_23_9_10/img_11.png","hash":"0710b5463838bf411b351bce7372763570cece76","modified":1694356355116},{"_id":"public/img_23_9_10/img.png","hash":"0e337c4174cec545cac17c464bc83a60790682eb","modified":1694356355116},{"_id":"public/img_23_9_10/img_12.png","hash":"449633d54439ea579d6fe46e6b9ae2c21cb142fa","modified":1694356355116},{"_id":"public/img_23_9_10/img_1.png","hash":"df0443ca40cbe139de0d26c22c68a7bb0340da92","modified":1694356355116},{"_id":"public/img_23_9_10/img_13.png","hash":"d0447342a5b32749c7c3fc670f7db3ca0a6cd6da","modified":1694356355116},{"_id":"public/img_23_9_10/img_10.png","hash":"435a834b191756e82bf63e33be32de77017d2134","modified":1694356355116},{"_id":"public/img_23_9_10/img_2.png","hash":"7229ba103c1373f09f4b7abf7e6cbb4d4832f064","modified":1694356355116},{"_id":"public/img_23_9_10/img_3.png","hash":"d44316f19fc92170270c4e82ecf9d42c1c270c5d","modified":1694356355116},{"_id":"public/img_23_9_10/img_4.png","hash":"66125fd0adceff2cc4e7efd275a3da95330773b5","modified":1694356355116},{"_id":"public/img_23_9_10/img_5.png","hash":"49e5ae54f5624693ea69a4f82dbd2c3f7fb86dd2","modified":1694356355116},{"_id":"public/img_23_9_10/img_6.png","hash":"11f9f0e465f3436e140da428244f194be96448b0","modified":1694356355116},{"_id":"public/img_23_9_10/img_7.png","hash":"91124cd071cb0fd86ef7551d3450419bac7ed26f","modified":1694356355116},{"_id":"public/img_23_9_10/img_8.png","hash":"3e24c44d19f563c4c491a18d6000481a6cf16670","modified":1694356355116},{"_id":"public/img_23_9_10/img_9.png","hash":"c23a9f89b78f3670e507c82deb9aa5c54e6ef7c8","modified":1694356355116}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"vue学习笔记(一)","date":"2023-06-26T23:58:05.000Z","_content":"\n## ref系列\n\n### ref\n\n以下是ref的基本使用：\n\n```TypeScript\ntype Person = {\n  name:string,\n  age:number\n}\n\nconst person =  ref<Person>({\n  name:\"Jessie\",\n  age:18\n})\n```\n\n### shallowRef\n\n作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：\n\n```TypeScript\nconst person =  shallowRef<Person>({\n  name:\"Jessie\",\n  age:18\n})\nperson.value = {\n  name:\"Chan\",\n  age:20\n}\n```\n\n注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为*ref*底层已经调用了*triggerRef*导致依赖收集更新。\n\n### customRef\n\n自定义ref\n\n```TypeScript\nfunction MyRef<T>(value:T){\n  return customRef((track,trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newVal){\n        value = newVal\n        trigger()\n      }\n    }\n  })\n} \n```\n\n### ref获取dom元素\n\n```TypeScript\n....\n<div ref=\"dom\"></div>\n....\n\nconst dom  = ref<HTMLDivElement>()\ndom.value?.innerHTML\n```\n\n### 原理解析\n\nref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为*triggerRefValue*这个函数，ref和triggerRef这两个函数底层都调用了这个函数。\n\n## Reactive系列\n\n### reactive\n\n基本使用\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\nform.name \n```\n\n注意： 数组不能直接赋值，否则破坏响应式对象\n\n```TypeScript\nlet arr = [1,2,3,4]\nlet list = reactive([])\n// list = arr 错误\nlist.push(...arr)\n\n// 或者\nlet arr = [1,2,3,4]\nlet list = reactive<{\n   arr:string[]\n}>({\n arr:[]\n})\nlist.arr = arr\n```\n\n### readonly\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\n// 只读对象\nlet read = readonly(form)\n```\n\n注意：此时read对象仍旧收到原来form对象的影\n\n### shallowReactive\n\n基本使用：\n\n```TypeScript\nlet form = shallowReactive({\n  // 此时只能监听到foo层\n   foo:{\n     name:{\n        xing:'Chan',\n        ming:'Jessie'\n     }\n   }\n})\n```\n\n注意：shallowReactive与reactive同样不能一起用，否则会出现与上述*ref*相同的问题。\n\n## to系列\n\n### toRef\n\n只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。\n\n```TypeScript\nconst person = reactive({ name:\"Jessie\" , age:20 })\nlet name = toRef(person,\"name\")\n\nconst test(name:Ref<string>){\n   ......\n}\ntest(name)\n```\n\n### toRefs\n\n源码\n\n```TypeScript\nconst  toRefs = <T extends object>(object:T){\n  const map:any = {}\n  for(let key in object){\n    map[key] = toRef(object,key)\n  }\n  return map\n}\nconst {name,age} = toRefs(person)\n```\n\n注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs\n\n### toRaw\n\n取消响应式\n\n```TypeScript\ntoRaw(person)\n```\n","source":"_posts/vue学习笔记-一.md","raw":"---\ntitle: vue学习笔记(一)\ndate: 2023-06-27 07:58:05\ntags: Vue\n---\n\n## ref系列\n\n### ref\n\n以下是ref的基本使用：\n\n```TypeScript\ntype Person = {\n  name:string,\n  age:number\n}\n\nconst person =  ref<Person>({\n  name:\"Jessie\",\n  age:18\n})\n```\n\n### shallowRef\n\n作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：\n\n```TypeScript\nconst person =  shallowRef<Person>({\n  name:\"Jessie\",\n  age:18\n})\nperson.value = {\n  name:\"Chan\",\n  age:20\n}\n```\n\n注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为*ref*底层已经调用了*triggerRef*导致依赖收集更新。\n\n### customRef\n\n自定义ref\n\n```TypeScript\nfunction MyRef<T>(value:T){\n  return customRef((track,trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newVal){\n        value = newVal\n        trigger()\n      }\n    }\n  })\n} \n```\n\n### ref获取dom元素\n\n```TypeScript\n....\n<div ref=\"dom\"></div>\n....\n\nconst dom  = ref<HTMLDivElement>()\ndom.value?.innerHTML\n```\n\n### 原理解析\n\nref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为*triggerRefValue*这个函数，ref和triggerRef这两个函数底层都调用了这个函数。\n\n## Reactive系列\n\n### reactive\n\n基本使用\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\nform.name \n```\n\n注意： 数组不能直接赋值，否则破坏响应式对象\n\n```TypeScript\nlet arr = [1,2,3,4]\nlet list = reactive([])\n// list = arr 错误\nlist.push(...arr)\n\n// 或者\nlet arr = [1,2,3,4]\nlet list = reactive<{\n   arr:string[]\n}>({\n arr:[]\n})\nlist.arr = arr\n```\n\n### readonly\n\n```TypeScript\nlet form = reactive({\n   name:'Jessie',\n   age:40\n})\n// 只读对象\nlet read = readonly(form)\n```\n\n注意：此时read对象仍旧收到原来form对象的影\n\n### shallowReactive\n\n基本使用：\n\n```TypeScript\nlet form = shallowReactive({\n  // 此时只能监听到foo层\n   foo:{\n     name:{\n        xing:'Chan',\n        ming:'Jessie'\n     }\n   }\n})\n```\n\n注意：shallowReactive与reactive同样不能一起用，否则会出现与上述*ref*相同的问题。\n\n## to系列\n\n### toRef\n\n只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。\n\n```TypeScript\nconst person = reactive({ name:\"Jessie\" , age:20 })\nlet name = toRef(person,\"name\")\n\nconst test(name:Ref<string>){\n   ......\n}\ntest(name)\n```\n\n### toRefs\n\n源码\n\n```TypeScript\nconst  toRefs = <T extends object>(object:T){\n  const map:any = {}\n  for(let key in object){\n    map[key] = toRef(object,key)\n  }\n  return map\n}\nconst {name,age} = toRefs(person)\n```\n\n注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs\n\n### toRaw\n\n取消响应式\n\n```TypeScript\ntoRaw(person)\n```\n","slug":"vue学习笔记-一","published":1,"updated":"2023-06-27T07:42:35.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljdzo8g60000w4tx9wa1hfoi","content":"<h2 id=\"ref系列\"><a href=\"#ref系列\" class=\"headerlink\" title=\"ref系列\"></a>ref系列</h2><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>以下是ref的基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person =  ref&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shallowRef\"><a href=\"#shallowRef\" class=\"headerlink\" title=\"shallowRef\"></a>shallowRef</h3><p>作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person =  shallowRef&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">person.<span class=\"property\">value</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Chan&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为<em>ref</em>底层已经调用了<em>triggerRef</em>导致依赖收集更新。</p>\n<h3 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef\"></a>customRef</h3><p>自定义ref</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">MyRef</span>&lt;T&gt;(<span class=\"attr\">value</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">track</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>)&#123;</span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ref获取dom元素\"><a href=\"#ref获取dom元素\" class=\"headerlink\" title=\"ref获取dom元素\"></a>ref获取dom元素</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">&lt;div ref=<span class=\"string\">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom  = ref&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;()</span><br><span class=\"line\">dom.<span class=\"property\">value</span>?.<span class=\"property\">innerHTML</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p>ref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为<em>triggerRefValue</em>这个函数，ref和triggerRef这两个函数底层都调用了这个函数。</p>\n<h2 id=\"Reactive系列\"><a href=\"#Reactive系列\" class=\"headerlink\" title=\"Reactive系列\"></a>Reactive系列</h2><h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p>基本使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">form.<span class=\"property\">name</span> </span><br></pre></td></tr></table></figure>\n\n<p>注意： 数组不能直接赋值，否则破坏响应式对象</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"title function_\">reactive</span>([])</span><br><span class=\"line\"><span class=\"comment\">// list = arr 错误</span></span><br><span class=\"line\">list.<span class=\"title function_\">push</span>(...arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = reactive&lt;&#123;</span><br><span class=\"line\">   <span class=\"attr\">arr</span>:<span class=\"built_in\">string</span>[]</span><br><span class=\"line\">&#125;&gt;(&#123;</span><br><span class=\"line\"> <span class=\"attr\">arr</span>:[]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">list.<span class=\"property\">arr</span> = arr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 只读对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> read = <span class=\"title function_\">readonly</span>(form)</span><br></pre></td></tr></table></figure>\n\n<p>注意：此时read对象仍旧收到原来form对象的影</p>\n<h3 id=\"shallowReactive\"><a href=\"#shallowReactive\" class=\"headerlink\" title=\"shallowReactive\"></a>shallowReactive</h3><p>基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时只能监听到foo层</span></span><br><span class=\"line\">   <span class=\"attr\">foo</span>:&#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">xing</span>:<span class=\"string\">&#x27;Chan&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">ming</span>:<span class=\"string\">&#x27;Jessie&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：shallowReactive与reactive同样不能一起用，否则会出现与上述<em>ref</em>相同的问题。</p>\n<h2 id=\"to系列\"><a href=\"#to系列\" class=\"headerlink\" title=\"to系列\"></a>to系列</h2><h3 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h3><p>只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span> , <span class=\"attr\">age</span>:<span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">toRef</span>(person,<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span>(<span class=\"params\">name:Ref&lt;<span class=\"built_in\">string</span>&gt;</span>)&#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h3><p>源码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  toRefs = &lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt;(<span class=\"attr\">object</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">map</span>:<span class=\"built_in\">any</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">object</span>)&#123;</span><br><span class=\"line\">    map[key] = <span class=\"title function_\">toRef</span>(<span class=\"built_in\">object</span>,key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = <span class=\"title function_\">toRefs</span>(person)</span><br></pre></td></tr></table></figure>\n\n<p>注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs</p>\n<h3 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h3><p>取消响应式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toRaw</span>(person)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ref系列\"><a href=\"#ref系列\" class=\"headerlink\" title=\"ref系列\"></a>ref系列</h2><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>以下是ref的基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person =  ref&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shallowRef\"><a href=\"#shallowRef\" class=\"headerlink\" title=\"shallowRef\"></a>shallowRef</h3><p>作为浅层次的响应，数据较大的时候建议使用浅层次响应，以节约性能：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person =  shallowRef&lt;<span class=\"title class_\">Person</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">person.<span class=\"property\">value</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;Chan&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意: ref与shallowRef会相互产生影响，shallowRef和ref不能够同时使用。因为<em>ref</em>底层已经调用了<em>triggerRef</em>导致依赖收集更新。</p>\n<h3 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef\"></a>customRef</h3><p>自定义ref</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">MyRef</span>&lt;T&gt;(<span class=\"attr\">value</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">customRef</span>(<span class=\"function\">(<span class=\"params\">track,trigger</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">track</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"title function_\">set</span>(<span class=\"params\">newVal</span>)&#123;</span><br><span class=\"line\">        value = newVal</span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ref获取dom元素\"><a href=\"#ref获取dom元素\" class=\"headerlink\" title=\"ref获取dom元素\"></a>ref获取dom元素</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">&lt;div ref=<span class=\"string\">&quot;dom&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom  = ref&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;()</span><br><span class=\"line\">dom.<span class=\"property\">value</span>?.<span class=\"property\">innerHTML</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h3><p>ref底层其实调用的还是reactive，如果是普通值则直接返回值，如果是对象则调用reactive，导致shallowRef更新的原因是因为<em>triggerRefValue</em>这个函数，ref和triggerRef这两个函数底层都调用了这个函数。</p>\n<h2 id=\"Reactive系列\"><a href=\"#Reactive系列\" class=\"headerlink\" title=\"Reactive系列\"></a>Reactive系列</h2><h3 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h3><p>基本使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">form.<span class=\"property\">name</span> </span><br></pre></td></tr></table></figure>\n\n<p>注意： 数组不能直接赋值，否则破坏响应式对象</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"title function_\">reactive</span>([])</span><br><span class=\"line\"><span class=\"comment\">// list = arr 错误</span></span><br><span class=\"line\">list.<span class=\"title function_\">push</span>(...arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> list = reactive&lt;&#123;</span><br><span class=\"line\">   <span class=\"attr\">arr</span>:<span class=\"built_in\">string</span>[]</span><br><span class=\"line\">&#125;&gt;(&#123;</span><br><span class=\"line\"> <span class=\"attr\">arr</span>:[]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">list.<span class=\"property\">arr</span> = arr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Jessie&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">40</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 只读对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> read = <span class=\"title function_\">readonly</span>(form)</span><br></pre></td></tr></table></figure>\n\n<p>注意：此时read对象仍旧收到原来form对象的影</p>\n<h3 id=\"shallowReactive\"><a href=\"#shallowReactive\" class=\"headerlink\" title=\"shallowReactive\"></a>shallowReactive</h3><p>基本使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> form = <span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时只能监听到foo层</span></span><br><span class=\"line\">   <span class=\"attr\">foo</span>:&#123;</span><br><span class=\"line\">     <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">xing</span>:<span class=\"string\">&#x27;Chan&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">ming</span>:<span class=\"string\">&#x27;Jessie&#x27;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：shallowReactive与reactive同样不能一起用，否则会出现与上述<em>ref</em>相同的问题。</p>\n<h2 id=\"to系列\"><a href=\"#to系列\" class=\"headerlink\" title=\"to系列\"></a>to系列</h2><h3 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef\"></a>toRef</h3><p>只能修改响应式数据，常用于解构，然后作为函数的参数。并且单独取值不影响原来的对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;Jessie&quot;</span> , <span class=\"attr\">age</span>:<span class=\"number\">20</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"title function_\">toRef</span>(person,<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">test</span>(<span class=\"params\">name:Ref&lt;<span class=\"built_in\">string</span>&gt;</span>)&#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs\"></a>toRefs</h3><p>源码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span>  toRefs = &lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">object</span>&gt;(<span class=\"attr\">object</span>:T)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">map</span>:<span class=\"built_in\">any</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">object</span>)&#123;</span><br><span class=\"line\">    map[key] = <span class=\"title function_\">toRef</span>(<span class=\"built_in\">object</span>,key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = <span class=\"title function_\">toRefs</span>(person)</span><br></pre></td></tr></table></figure>\n\n<p>注意： reactive一旦解构就失去了响应式，所以解构赋值请使用toRef或者toRefs</p>\n<h3 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h3><p>取消响应式</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">toRaw</span>(person)</span><br></pre></td></tr></table></figure>\n"},{"title":"我的第一篇博客","date":"2023-06-19T14:22:56.000Z","_content":"\n### hello hexo\n\n这是我的第一篇博客,也是我改变世界的开始\n","source":"_posts/我的第一篇博客.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2023-06-19 22:22:56\ntags: 闲聊\n---\n\n### hello hexo\n\n这是我的第一篇博客,也是我改变世界的开始\n","slug":"我的第一篇博客","published":1,"updated":"2023-06-26T03:50:50.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljdzo8gh0001w4tx3szh671g","content":"<h3 id=\"hello-hexo\"><a href=\"#hello-hexo\" class=\"headerlink\" title=\"hello hexo\"></a>hello hexo</h3><p>这是我的第一篇博客,也是我改变世界的开始</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"hello-hexo\"><a href=\"#hello-hexo\" class=\"headerlink\" title=\"hello hexo\"></a>hello hexo</h3><p>这是我的第一篇博客,也是我改变世界的开始</p>\n"},{"title":"Django学习笔记(一)","date":"2023-09-10T09:19:01.000Z","_content":"## Django-admin后台\n\n### 介绍\n\ndjango提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用\n\n### 基本使用\n\n#### 创建超级用户\n\n通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：\n\n```pycon\npython .\\manage.py createsuperuser\n```\n\n创建成功：\n\n```\nUsername (leave blank to use 'administrator'): root\nEmail address: root@qq.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n```\n\n输入对应的url进入到`admin`管理界面：\n[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)  \n如下：  \n![img.png](img_23_9_10/img.png)\n\n#### 中文化界面\n\n在settings文件中设置\n\n```pycon\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n效果:\n![img_1.png](img_23_9_10/img_1.png)\n\n#### 组与权限\n\n我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。\n例如我们可以像下面这么做：\n![img_2.png](img_23_9_10/img_2.png)\n我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。\n\n#### 管理模型类\n\n如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作\n\n1. 在`admin.py`文件中导入对应的模型类\n2. 导入注册的方法\n3. 注册模型\n\n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n# Register your models here.\nadmin.site.register(Author)\n```\n\n效果：  \n![img_3.png](img_23_9_10/img_3.png)\n\n#### 修改显示样式\n\n如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示  \n![img_4.png](img_23_9_10/img_4.png)  \n如果想要优化显示我们只需要在model中添加`__str__`方法,如下：\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(max_length=10)\n    password = models.CharField(max_length=16)\n    telephone = models.CharField(max_length=16)\n\n    def __str__(self):\n        return f'{self.name}-{self.password}-{self.telephone}'\n```\n\n最终效果：\n![img_5.png](img_23_9_10/img_5.png)\n\n#### ModelAdmin 对象\n\n作用:\n为后台管理界面添加便于操作的新功能  \n说明:\n后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类\n\n1. 继承 ModelAdmin 类\n2. 编写对应的操作代码\n3. 注册的时候传递对应的模型已经模型管理类\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n#### 使用register装饰器\n\n对于上面的操作我们可以使用更加简便的装饰器来完成  \n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n```\n\n#### ModelAdmin类属性\n\n##### list_display\n\n添加字段分类\n\n```pycon\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'password', 'telephone']\n```\n\n效果：\n![img_6.png](img_23_9_10/img_6.png)\n需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加`verbose_name`参数\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=10)\n    password = models.CharField(verbose_name='密码', max_length=16)\n    telephone = models.CharField(verbose_name='电话', max_length=16)\n```\n\n效果：\n![img_7.png](img_23_9_10/img_7.png)\n\n##### list_display_links\n\n用于设置点哪个字段会进入到修改页\n\n```pycon\n....\n    list_display_links = ['id']\n....\n```\n\n效果\n![img_8.png](img_23_9_10/img_8.png)\n\n##### list_filter\n\n设置可以用来的分类的字段\n\n```pycon\n....\n    list_filter = ['name']\n....\n```\n\n效果\n![img_9.png](img_23_9_10/img_9.png)\n\n##### search_fields\n\n设置允许搜索的字段\n\n```pycon\n....\n    search_fields = ['id']\n....\n```\n\n效果\n![img_10.png](img_23_9_10/img_10.png)\n\n##### list_editable\n\n添加允许直接在列表中直接修改的字段\n\n```pycon\n....\n    list_editable = ['telephone']\n....\n```\n\n效果：\n![img_11.png](img_23_9_10/img_11.png)\n\n##### 更多\n\n更多字段的作用请查看的官网文档  \n[https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects](https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects)\n\n#### Meta与ModelAdmin类的联动\n\n##### db_table\n\n设置表名\n\n##### verbose_name\n\n设置表名称，能够在admin后台展示\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n```\n\n效果\n![img_12.png](img_23_9_10/img_12.png)\n\n##### verbose_name_plural\n\n上面由于使用了复数形式，所以名称后面带上了s,故为`作者s`，如果我们需要设置这个表复数状态下的名称我们可以使用：\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n        verbose_name_plural = verbose_name\n```\n\n效果：\n![img_13.png](img_23_9_10/img_13.png)\n","source":"_posts/Django学习笔记一.md","raw":"---\ntitle: Django学习笔记(一)\ndate: 2023-09-10 17:19:01\ntags: Django\n---\n## Django-admin后台\n\n### 介绍\n\ndjango提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用\n\n### 基本使用\n\n#### 创建超级用户\n\n通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：\n\n```pycon\npython .\\manage.py createsuperuser\n```\n\n创建成功：\n\n```\nUsername (leave blank to use 'administrator'): root\nEmail address: root@qq.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n```\n\n输入对应的url进入到`admin`管理界面：\n[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)  \n如下：  \n![img.png](img_23_9_10/img.png)\n\n#### 中文化界面\n\n在settings文件中设置\n\n```pycon\nLANGUAGE_CODE = 'zh-hans'\nTIME_ZONE = 'Asia/Shanghai'\n```\n\n效果:\n![img_1.png](img_23_9_10/img_1.png)\n\n#### 组与权限\n\n我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。\n例如我们可以像下面这么做：\n![img_2.png](img_23_9_10/img_2.png)\n我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。\n\n#### 管理模型类\n\n如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作\n\n1. 在`admin.py`文件中导入对应的模型类\n2. 导入注册的方法\n3. 注册模型\n\n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n# Register your models here.\nadmin.site.register(Author)\n```\n\n效果：  \n![img_3.png](img_23_9_10/img_3.png)\n\n#### 修改显示样式\n\n如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示  \n![img_4.png](img_23_9_10/img_4.png)  \n如果想要优化显示我们只需要在model中添加`__str__`方法,如下：\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(max_length=10)\n    password = models.CharField(max_length=16)\n    telephone = models.CharField(max_length=16)\n\n    def __str__(self):\n        return f'{self.name}-{self.password}-{self.telephone}'\n```\n\n最终效果：\n![img_5.png](img_23_9_10/img_5.png)\n\n#### ModelAdmin 对象\n\n作用:\n为后台管理界面添加便于操作的新功能  \n说明:\n后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类\n\n1. 继承 ModelAdmin 类\n2. 编写对应的操作代码\n3. 注册的时候传递对应的模型已经模型管理类\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n\nadmin.site.register(Author, AuthorAdmin)\n```\n\n#### 使用register装饰器\n\n对于上面的操作我们可以使用更加简便的装饰器来完成  \n代码如下：\n\n```pycon\nfrom django.contrib import admin\nfrom .models import Author\n\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    pass\n```\n\n#### ModelAdmin类属性\n\n##### list_display\n\n添加字段分类\n\n```pycon\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'password', 'telephone']\n```\n\n效果：\n![img_6.png](img_23_9_10/img_6.png)\n需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加`verbose_name`参数\n\n```pycon\nclass Author(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=10)\n    password = models.CharField(verbose_name='密码', max_length=16)\n    telephone = models.CharField(verbose_name='电话', max_length=16)\n```\n\n效果：\n![img_7.png](img_23_9_10/img_7.png)\n\n##### list_display_links\n\n用于设置点哪个字段会进入到修改页\n\n```pycon\n....\n    list_display_links = ['id']\n....\n```\n\n效果\n![img_8.png](img_23_9_10/img_8.png)\n\n##### list_filter\n\n设置可以用来的分类的字段\n\n```pycon\n....\n    list_filter = ['name']\n....\n```\n\n效果\n![img_9.png](img_23_9_10/img_9.png)\n\n##### search_fields\n\n设置允许搜索的字段\n\n```pycon\n....\n    search_fields = ['id']\n....\n```\n\n效果\n![img_10.png](img_23_9_10/img_10.png)\n\n##### list_editable\n\n添加允许直接在列表中直接修改的字段\n\n```pycon\n....\n    list_editable = ['telephone']\n....\n```\n\n效果：\n![img_11.png](img_23_9_10/img_11.png)\n\n##### 更多\n\n更多字段的作用请查看的官网文档  \n[https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects](https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects)\n\n#### Meta与ModelAdmin类的联动\n\n##### db_table\n\n设置表名\n\n##### verbose_name\n\n设置表名称，能够在admin后台展示\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n```\n\n效果\n![img_12.png](img_23_9_10/img_12.png)\n\n##### verbose_name_plural\n\n上面由于使用了复数形式，所以名称后面带上了s,故为`作者s`，如果我们需要设置这个表复数状态下的名称我们可以使用：\n\n```pycon\n.....\n    class Meta:\n        db_table = 'author'\n        verbose_name = '作者'\n        verbose_name_plural = verbose_name\n```\n\n效果：\n![img_13.png](img_23_9_10/img_13.png)\n","slug":"Django学习笔记一","published":1,"updated":"2023-09-10T14:25:53.349Z","_id":"clmd8ug1v0000qotxc71x36kk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Django-admin后台\"><a href=\"#Django-admin后台\" class=\"headerlink\" title=\"Django-admin后台\"></a>Django-admin后台</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>django提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><h4 id=\"创建超级用户\"><a href=\"#创建超级用户\" class=\"headerlink\" title=\"创建超级用户\"></a>创建超级用户</h4><p>通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>创建成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username (leave blank to use &#x27;administrator&#x27;): root</span><br><span class=\"line\">Email address: root@qq.com</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Password (again):</span><br><span class=\"line\">Superuser created successfully.</span><br></pre></td></tr></table></figure>\n\n<p>输入对应的url进入到<code>admin</code>管理界面：<br><a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a><br>如下：<br><img src=\"/img_23_9_10/img.png\" alt=\"img.png\"></p>\n<h4 id=\"中文化界面\"><a href=\"#中文化界面\" class=\"headerlink\" title=\"中文化界面\"></a>中文化界面</h4><p>在settings文件中设置</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = &#x27;zh-hans&#x27;</span><br><span class=\"line\">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果:<br><img src=\"/img_23_9_10/img_1.png\" alt=\"img_1.png\"></p>\n<h4 id=\"组与权限\"><a href=\"#组与权限\" class=\"headerlink\" title=\"组与权限\"></a>组与权限</h4><p>我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。<br>例如我们可以像下面这么做：<br><img src=\"/img_23_9_10/img_2.png\" alt=\"img_2.png\"><br>我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。</p>\n<h4 id=\"管理模型类\"><a href=\"#管理模型类\" class=\"headerlink\" title=\"管理模型类\"></a>管理模型类</h4><p>如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作</p>\n<ol>\n<li>在<code>admin.py</code>文件中导入对应的模型类</li>\n<li>导入注册的方法</li>\n<li>注册模型</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\"># Register your models here.</span><br><span class=\"line\">admin.site.register(Author)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_3.png\" alt=\"img_3.png\"></p>\n<h4 id=\"修改显示样式\"><a href=\"#修改显示样式\" class=\"headerlink\" title=\"修改显示样式\"></a>修改显示样式</h4><p>如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示<br><img src=\"/img_23_9_10/img_4.png\" alt=\"img_4.png\"><br>如果想要优化显示我们只需要在model中添加<code>__str__</code>方法,如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=10)</span><br><span class=\"line\">    password = models.CharField(max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(max_length=16)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&#x27;&#123;self.name&#125;-&#123;self.password&#125;-&#123;self.telephone&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最终效果：<br><img src=\"/img_23_9_10/img_5.png\" alt=\"img_5.png\"></p>\n<h4 id=\"ModelAdmin-对象\"><a href=\"#ModelAdmin-对象\" class=\"headerlink\" title=\"ModelAdmin 对象\"></a>ModelAdmin 对象</h4><p>作用:<br>为后台管理界面添加便于操作的新功能<br>说明:<br>后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类</p>\n<ol>\n<li>继承 ModelAdmin 类</li>\n<li>编写对应的操作代码</li>\n<li>注册的时候传递对应的模型已经模型管理类</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Author, AuthorAdmin)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用register装饰器\"><a href=\"#使用register装饰器\" class=\"headerlink\" title=\"使用register装饰器\"></a>使用register装饰器</h4><p>对于上面的操作我们可以使用更加简便的装饰器来完成<br>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ModelAdmin类属性\"><a href=\"#ModelAdmin类属性\" class=\"headerlink\" title=\"ModelAdmin类属性\"></a>ModelAdmin类属性</h4><h5 id=\"list-display\"><a href=\"#list-display\" class=\"headerlink\" title=\"list_display\"></a>list_display</h5><p>添加字段分类</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = [&#x27;id&#x27;, &#x27;name&#x27;, &#x27;password&#x27;, &#x27;telephone&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_6.png\" alt=\"img_6.png\"><br>需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加<code>verbose_name</code>参数</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&#x27;书名&#x27;, max_length=10)</span><br><span class=\"line\">    password = models.CharField(verbose_name=&#x27;密码&#x27;, max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(verbose_name=&#x27;电话&#x27;, max_length=16)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_7.png\" alt=\"img_7.png\"></p>\n<h5 id=\"list-display-links\"><a href=\"#list-display-links\" class=\"headerlink\" title=\"list_display_links\"></a>list_display_links</h5><p>用于设置点哪个字段会进入到修改页</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_display_links = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_8.png\" alt=\"img_8.png\"></p>\n<h5 id=\"list-filter\"><a href=\"#list-filter\" class=\"headerlink\" title=\"list_filter\"></a>list_filter</h5><p>设置可以用来的分类的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_filter = [&#x27;name&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_9.png\" alt=\"img_9.png\"></p>\n<h5 id=\"search-fields\"><a href=\"#search-fields\" class=\"headerlink\" title=\"search_fields\"></a>search_fields</h5><p>设置允许搜索的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    search_fields = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_10.png\" alt=\"img_10.png\"></p>\n<h5 id=\"list-editable\"><a href=\"#list-editable\" class=\"headerlink\" title=\"list_editable\"></a>list_editable</h5><p>添加允许直接在列表中直接修改的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_editable = [&#x27;telephone&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_11.png\" alt=\"img_11.png\"></p>\n<h5 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h5><p>更多字段的作用请查看的官网文档<br><a href=\"https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects\">https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects</a></p>\n<h4 id=\"Meta与ModelAdmin类的联动\"><a href=\"#Meta与ModelAdmin类的联动\" class=\"headerlink\" title=\"Meta与ModelAdmin类的联动\"></a>Meta与ModelAdmin类的联动</h4><h5 id=\"db-table\"><a href=\"#db-table\" class=\"headerlink\" title=\"db_table\"></a>db_table</h5><p>设置表名</p>\n<h5 id=\"verbose-name\"><a href=\"#verbose-name\" class=\"headerlink\" title=\"verbose_name\"></a>verbose_name</h5><p>设置表名称，能够在admin后台展示</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_12.png\" alt=\"img_12.png\"></p>\n<h5 id=\"verbose-name-plural\"><a href=\"#verbose-name-plural\" class=\"headerlink\" title=\"verbose_name_plural\"></a>verbose_name_plural</h5><p>上面由于使用了复数形式，所以名称后面带上了s,故为<code>作者s</code>，如果我们需要设置这个表复数状态下的名称我们可以使用：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br><span class=\"line\">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_13.png\" alt=\"img_13.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Django-admin后台\"><a href=\"#Django-admin后台\" class=\"headerlink\" title=\"Django-admin后台\"></a>Django-admin后台</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>django提供了比较完善的后台管理数据库的接口，可供开发过程中调用和测试使用 django会搜集所有已注册的模型类为这些模型类提拱数据管理界面，供开发者使用</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><h4 id=\"创建超级用户\"><a href=\"#创建超级用户\" class=\"headerlink\" title=\"创建超级用户\"></a>创建超级用户</h4><p>通过命令创建一个超级用户，随后输入用户名，邮箱和密码回车即可，如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\manage.py createsuperuser</span><br></pre></td></tr></table></figure>\n\n<p>创建成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username (leave blank to use &#x27;administrator&#x27;): root</span><br><span class=\"line\">Email address: root@qq.com</span><br><span class=\"line\">Password:</span><br><span class=\"line\">Password (again):</span><br><span class=\"line\">Superuser created successfully.</span><br></pre></td></tr></table></figure>\n\n<p>输入对应的url进入到<code>admin</code>管理界面：<br><a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a><br>如下：<br><img src=\"/img_23_9_10/img.png\" alt=\"img.png\"></p>\n<h4 id=\"中文化界面\"><a href=\"#中文化界面\" class=\"headerlink\" title=\"中文化界面\"></a>中文化界面</h4><p>在settings文件中设置</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = &#x27;zh-hans&#x27;</span><br><span class=\"line\">TIME_ZONE = &#x27;Asia/Shanghai&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果:<br><img src=\"/img_23_9_10/img_1.png\" alt=\"img_1.png\"></p>\n<h4 id=\"组与权限\"><a href=\"#组与权限\" class=\"headerlink\" title=\"组与权限\"></a>组与权限</h4><p>我们可以将组比喻成为部门，通过赋予这些组一定的权限。然后让对应的用户入组，这样就可以不用单独给每一个用户权权限了。<br>例如我们可以像下面这么做：<br><img src=\"/img_23_9_10/img_2.png\" alt=\"img_2.png\"><br>我们添加了一个前端开发组，并且给这个组对应权限，如果下次某些用户是前端开发者，那么可以直接加入到这个组中。</p>\n<h4 id=\"管理模型类\"><a href=\"#管理模型类\" class=\"headerlink\" title=\"管理模型类\"></a>管理模型类</h4><p>如果我们需要在admin后台中管理自己的模型类，那么需要做如下的操作</p>\n<ol>\n<li>在<code>admin.py</code>文件中导入对应的模型类</li>\n<li>导入注册的方法</li>\n<li>注册模型</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\"># Register your models here.</span><br><span class=\"line\">admin.site.register(Author)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_3.png\" alt=\"img_3.png\"></p>\n<h4 id=\"修改显示样式\"><a href=\"#修改显示样式\" class=\"headerlink\" title=\"修改显示样式\"></a>修改显示样式</h4><p>如果我们没有做任何的操作，那么此时里面的数据会呈对象形式展示<br><img src=\"/img_23_9_10/img_4.png\" alt=\"img_4.png\"><br>如果想要优化显示我们只需要在model中添加<code>__str__</code>方法,如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=10)</span><br><span class=\"line\">    password = models.CharField(max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(max_length=16)</span><br><span class=\"line\"></span><br><span class=\"line\">    def __str__(self):</span><br><span class=\"line\">        return f&#x27;&#123;self.name&#125;-&#123;self.password&#125;-&#123;self.telephone&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>最终效果：<br><img src=\"/img_23_9_10/img_5.png\" alt=\"img_5.png\"></p>\n<h4 id=\"ModelAdmin-对象\"><a href=\"#ModelAdmin-对象\" class=\"headerlink\" title=\"ModelAdmin 对象\"></a>ModelAdmin 对象</h4><p>作用:<br>为后台管理界面添加便于操作的新功能<br>说明:<br>后台管理器类须继承自 django.contrib.admin 里的 ModelAdmin 类</p>\n<ol>\n<li>继承 ModelAdmin 类</li>\n<li>编写对应的操作代码</li>\n<li>注册的时候传递对应的模型已经模型管理类</li>\n</ol>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">admin.site.register(Author, AuthorAdmin)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用register装饰器\"><a href=\"#使用register装饰器\" class=\"headerlink\" title=\"使用register装饰器\"></a>使用register装饰器</h4><p>对于上面的操作我们可以使用更加简便的装饰器来完成<br>代码如下：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib import admin</span><br><span class=\"line\">from .models import Author</span><br><span class=\"line\"></span><br><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ModelAdmin类属性\"><a href=\"#ModelAdmin类属性\" class=\"headerlink\" title=\"ModelAdmin类属性\"></a>ModelAdmin类属性</h4><h5 id=\"list-display\"><a href=\"#list-display\" class=\"headerlink\" title=\"list_display\"></a>list_display</h5><p>添加字段分类</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@admin.register(Author)</span><br><span class=\"line\">class AuthorAdmin(admin.ModelAdmin):</span><br><span class=\"line\">    list_display = [&#x27;id&#x27;, &#x27;name&#x27;, &#x27;password&#x27;, &#x27;telephone&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_6.png\" alt=\"img_6.png\"><br>需要注意的是此时添加的名字必须和模型字段名相同，如果想要显示中文信息，请在模型类字段中添加<code>verbose_name</code>参数</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Author(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&#x27;书名&#x27;, max_length=10)</span><br><span class=\"line\">    password = models.CharField(verbose_name=&#x27;密码&#x27;, max_length=16)</span><br><span class=\"line\">    telephone = models.CharField(verbose_name=&#x27;电话&#x27;, max_length=16)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_7.png\" alt=\"img_7.png\"></p>\n<h5 id=\"list-display-links\"><a href=\"#list-display-links\" class=\"headerlink\" title=\"list_display_links\"></a>list_display_links</h5><p>用于设置点哪个字段会进入到修改页</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_display_links = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_8.png\" alt=\"img_8.png\"></p>\n<h5 id=\"list-filter\"><a href=\"#list-filter\" class=\"headerlink\" title=\"list_filter\"></a>list_filter</h5><p>设置可以用来的分类的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_filter = [&#x27;name&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_9.png\" alt=\"img_9.png\"></p>\n<h5 id=\"search-fields\"><a href=\"#search-fields\" class=\"headerlink\" title=\"search_fields\"></a>search_fields</h5><p>设置允许搜索的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    search_fields = [&#x27;id&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_10.png\" alt=\"img_10.png\"></p>\n<h5 id=\"list-editable\"><a href=\"#list-editable\" class=\"headerlink\" title=\"list_editable\"></a>list_editable</h5><p>添加允许直接在列表中直接修改的字段</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">    list_editable = [&#x27;telephone&#x27;]</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_11.png\" alt=\"img_11.png\"></p>\n<h5 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h5><p>更多字段的作用请查看的官网文档<br><a href=\"https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects\">https://docs.djangoproject.com/zh-hans/4.2/ref/contrib/admin/#modeladmin-objects</a></p>\n<h4 id=\"Meta与ModelAdmin类的联动\"><a href=\"#Meta与ModelAdmin类的联动\" class=\"headerlink\" title=\"Meta与ModelAdmin类的联动\"></a>Meta与ModelAdmin类的联动</h4><h5 id=\"db-table\"><a href=\"#db-table\" class=\"headerlink\" title=\"db_table\"></a>db_table</h5><p>设置表名</p>\n<h5 id=\"verbose-name\"><a href=\"#verbose-name\" class=\"headerlink\" title=\"verbose_name\"></a>verbose_name</h5><p>设置表名称，能够在admin后台展示</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>效果<br><img src=\"/img_23_9_10/img_12.png\" alt=\"img_12.png\"></p>\n<h5 id=\"verbose-name-plural\"><a href=\"#verbose-name-plural\" class=\"headerlink\" title=\"verbose_name_plural\"></a>verbose_name_plural</h5><p>上面由于使用了复数形式，所以名称后面带上了s,故为<code>作者s</code>，如果我们需要设置这个表复数状态下的名称我们可以使用：</p>\n<figure class=\"highlight pycon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.....</span><br><span class=\"line\">    class Meta:</span><br><span class=\"line\">        db_table = &#x27;author&#x27;</span><br><span class=\"line\">        verbose_name = &#x27;作者&#x27;</span><br><span class=\"line\">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img src=\"/img_23_9_10/img_13.png\" alt=\"img_13.png\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cljdzo8g60000w4tx9wa1hfoi","tag_id":"cljdzo8gl0002w4txfm2j8jb9","_id":"cljdzo8gq0004w4tx16zg9wrp"},{"post_id":"cljdzo8gh0001w4tx3szh671g","tag_id":"cljdzo8gp0003w4tx7i0k7qk4","_id":"cljdzo8gr0005w4tx3bx8b20a"},{"post_id":"clmd8ug1v0000qotxc71x36kk","tag_id":"clmd8ug200001qotxg21lf0q3","_id":"clmd8ug230002qotxbbmsedmi"}],"Tag":[{"name":"Vue","_id":"cljdzo8gl0002w4txfm2j8jb9"},{"name":"闲聊","_id":"cljdzo8gp0003w4tx7i0k7qk4"},{"name":"Django","_id":"clmd8ug200001qotxg21lf0q3"}]}}